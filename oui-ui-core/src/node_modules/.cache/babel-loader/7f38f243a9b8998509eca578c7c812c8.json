{"remainingRequest":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\switch.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\switch.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.link\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      switchs: [],\n      switchPortState: [['n', this.$t('Switch port state - off')], ['u', this.$t('Switch port state - untagged')], ['t', this.$t('Switch port state - tagged')]]\n    };\n  },\n  methods: {\n    switchTitle: function switchTitle(info) {\n      return this.$t('Switch') + \"\\\"\".concat(info.name, \"\\\"(\").concat(info.model, \")\");\n    },\n    vlanTitle: function vlanTitle(info) {\n      return this.$t('VLANs on-', {\n        name: \"\\\"\".concat(info.name, \"\\\"(\").concat(info.model, \")\")\n      });\n    },\n    portLabel: function portLabel(n, info) {\n      var label = \"<span>Port \".concat(n, \"</span><br/>\");\n\n      if (info.link) {\n        label += '<img src=\"/icons/port_up.png\"/><br/>';\n        label += '<span>' + info.speed + 'baseT ';\n        if (info.full_duplex) label += this.$t('Full-duplex');else label += this.$t('Half-duplex');\n      } else {\n        label += '<img src=\"/icons/port_down.png\"/><br/>';\n        label += '<span>' + this.$t('No link');\n      }\n\n      label += '</span>';\n      return label;\n    },\n    filterVlanSection: function filterVlanSection(s, self) {\n      return self.options.swname === s.device;\n    },\n    addVlanSection: function addVlanSection(self) {\n      var usedVID = {};\n      self.uciSections.forEach(function (s) {\n        if (s.vlan) usedVID[s.vlan] = true;\n      });\n\n      for (var i = 1; i < self.options.num_vlans; i++) {\n        if (usedVID[i.toString()]) continue;\n        var sid = this.$uci.add('network', 'switch_vlan');\n        this.$uci.set('network', sid, 'device', self.options.swname);\n        this.$uci.set('network', sid, 'vlan', i.toString());\n        return sid;\n      }\n    },\n    vidValidator: function vidValidator(val, self) {\n      var sections = self.uciSection.uciSections;\n      var usedVID = {};\n      if (!val) return;\n\n      for (var i = 0; i < sections.length; i++) {\n        var sid = sections[i]['.name'];\n        var v = self.formValue(sid);\n        if (!v) continue;\n        if (usedVID[v]) return this.$t('VLAN ID must be unique');\n        usedVID[v] = true;\n      }\n\n      var max = self.uciSection.options.max_vid;\n\n      if (!val.match(/[^0-9]/)) {\n        val = parseInt(val);\n        if (val >= 1 && val <= max) return;\n      }\n\n      return this.$t('VID-ERR-MSG', {\n        max: max\n      });\n    },\n    loadPort: function loadPort(sid, self) {\n      var ports = this.$uci.get('network', sid, 'ports') || '';\n      ports = ports.split(' ');\n      var id = self.name.substr(4);\n      var v = 'n';\n      if (ports.indexOf(id + 't') > -1) v = 't';\n      if (ports.indexOf(id) > -1) v = 'u';\n      return v;\n    },\n    savePort: function savePort(sid, val, self) {\n      var ports = this.$uci.get('network', sid, 'ports').split(' ');\n      var id = self.name.substr(4);\n      var i = ports.indexOf(id);\n      if (i === -1) i = ports.indexOf(id + 't');\n      if (i !== -1) ports.splice(i, 1);\n      if (val === 'u') ports.push(id);else if (val === 't') ports.push(id + 't');\n      this.$uci.set('network', sid, 'ports', ports.join(' '));\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$uci.load('network').then(function () {\n      var sections = _this.$uci.sections('network', 'switch');\n\n      sections.forEach(function (s) {\n        var batch = [];\n        batch.push(['oui.network', 'switch_info', {\n          switch: s.name\n        }]);\n        batch.push(['oui.network', 'switch_status', {\n          switch: s.name\n        }]);\n\n        _this.$ubus.callBatch(batch).then(function (rs) {\n          var info = rs[0].info;\n          var ports = rs[1].ports;\n          var attrs = {};\n          info.switch.forEach(function (attr) {\n            attrs[attr.name] = true;\n          });\n          var max_vid = info.num_vlans - 1;\n          var vlanAttrs = info.vlan.map(function (v) {\n            return v.name;\n          });\n          if (vlanAttrs.indexOf('tag') > -1 || vlanAttrs.indexOf('vid') > -1 || vlanAttrs.indexOf('pvid') > -1) max_vid = 4094;\n\n          _this.switchs.push(Object.assign({\n            name: s.name,\n            sid: s['.name'],\n            max_vid: max_vid,\n            attrs: attrs,\n            ports: ports\n          }, info));\n        });\n      });\n    });\n  }\n};",{"version":3,"sources":["switch.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-tabs v-if=\"switchs.length > 0\" :value=\"switchs[0].name\">\n    <el-tab-pane v-for=\"s in switchs\" :key=\"s.name\" :name=\"s.name\" :label=\"switchTitle(s)\">\n      <uci-form config=\"network\" :apply-timeout=\"15\">\n        <uci-section :name=\"s.sid\">\n          <uci-option-switch v-if=\"s.attrs['enable_vlan']\" :label=\"$t('Enable VLAN functionality')\" name=\"enable_vlan\"></uci-option-switch>\n          <uci-option-switch v-if=\"s.attrs['enable_learning']\" :label=\"$t('Enable learning and aging')\" name=\"enable_learning\"></uci-option-switch>\n        </uci-section>\n        <uci-section title=\"VLAN\" type=\"switch_vlan\" :filter=\"filterVlanSection\" table addable :add=\"addVlanSection\" :options=\"{swname: s.name, num_vlans: s.num_vlans, max_vid: s.max_vid}\">\n          <uci-option-input label=\"VLAN ID\" name=\"vlan\" :rules=\"vidValidator\" required></uci-option-input>\n          <uci-option-list v-for=\"(port, i) in s.ports\" :key=\"i\" :header=\"portLabel(i, port)\" :name=\"'port' + i\" :options=\"switchPortState\" initial=\"n\" required :load=\"loadPort\" :save=\"savePort\"></uci-option-list>\n        </uci-section>\n      </uci-form>\n    </el-tab-pane>\n  </el-tabs>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      switchs: [],\n      switchPortState: [\n        ['n', this.$t('Switch port state - off')],\n        ['u', this.$t('Switch port state - untagged')],\n        ['t', this.$t('Switch port state - tagged')]\n      ]\n    }\n  },\n  methods: {\n    switchTitle(info) {\n      return this.$t('Switch') + `\"${info.name}\"(${info.model})`;\n    },\n    vlanTitle(info) {\n      return this.$t('VLANs on-', {name: `\"${info.name}\"(${info.model})`});\n    },\n    portLabel(n, info) {\n      let label = `<span>Port ${n}</span><br/>`;\n\n      if (info.link) {\n        label += '<img src=\"/icons/port_up.png\"/><br/>'\n        label += '<span>' + info.speed + 'baseT ';\n        if (info.full_duplex)\n          label += this.$t('Full-duplex');\n        else\n          label += this.$t('Half-duplex');\n      } else {\n        label += '<img src=\"/icons/port_down.png\"/><br/>'\n        label += '<span>' + this.$t('No link');\n      }\n      label += '</span>'\n      return label;\n    },\n    filterVlanSection(s, self) {\n      return self.options.swname === s.device;\n    },\n    addVlanSection(self) {\n      const usedVID = {};\n\n      self.uciSections.forEach(s => {\n        if (s.vlan)\n          usedVID[s.vlan] = true;\n      });\n\n      for (let i = 1; i < self.options.num_vlans; i++) {\n        if (usedVID[i.toString()])\n          continue;\n        const sid = this.$uci.add('network', 'switch_vlan');\n        this.$uci.set('network', sid, 'device', self.options.swname);\n        this.$uci.set('network', sid, 'vlan', i.toString());\n        return sid;\n      }\n    },\n    vidValidator(val, self) {\n      const sections = self.uciSection.uciSections;\n      const usedVID = {};\n\n      if (!val)\n        return;\n\n      for (let i = 0; i < sections.length; i++) {\n        const sid = sections[i]['.name'];\n        const v = self.formValue(sid);\n        if (!v)\n          continue;\n        if (usedVID[v])\n          return this.$t('VLAN ID must be unique');\n        usedVID[v] = true;\n      }\n\n      const max = self.uciSection.options.max_vid;\n      if (!val.match(/[^0-9]/)) {\n        val = parseInt(val);\n        if (val >= 1 && val <= max)\n          return;\n      }\n\n      return this.$t('VID-ERR-MSG', {max: max});\n    },\n    loadPort(sid, self) {\n      let ports = this.$uci.get('network', sid, 'ports') || '';\n      ports = ports.split(' ');\n      const id = self.name.substr(4);\n      let v = 'n';\n\n      if (ports.indexOf(id + 't') > -1)\n        v = 't';\n\n      if (ports.indexOf(id) > -1)\n        v = 'u';\n\n      return v;\n    },\n    savePort(sid, val, self) {\n      const ports = this.$uci.get('network', sid, 'ports').split(' ');\n      const id = self.name.substr(4);\n\n      let i = ports.indexOf(id);\n      if (i === -1)\n        i = ports.indexOf(id + 't');\n\n      if (i !== -1)\n        ports.splice(i, 1);\n\n      if (val === 'u')\n        ports.push(id);\n      else if (val === 't')\n        ports.push(id + 't');\n\n      this.$uci.set('network', sid, 'ports', ports.join(' '));\n    }\n  },\n  created() {\n    this.$uci.load('network').then(() => {\n      const sections = this.$uci.sections('network', 'switch');\n      sections.forEach(s => {\n        let batch = [];\n        batch.push(['oui.network', 'switch_info', {switch: s.name}]);\n        batch.push(['oui.network', 'switch_status', {switch: s.name}]);\n\n        this.$ubus.callBatch(batch).then(rs => {\n          const info = rs[0].info;\n          const ports = rs[1].ports;\n          const attrs = {};\n\n          info.switch.forEach(attr => {\n            attrs[attr.name] = true;\n          });\n\n          let max_vid = info.num_vlans - 1;\n          const vlanAttrs = info.vlan.map(v => v.name);\n          if (vlanAttrs.indexOf('tag') > -1 || vlanAttrs.indexOf('vid') > -1 || vlanAttrs.indexOf('pvid') > -1)\n            max_vid = 4094;\n\n          this.switchs.push(Object.assign({\n            name: s.name,\n            sid: s['.name'],\n            max_vid: max_vid,\n            attrs: attrs,\n            ports: ports\n          }, info));\n        });\n      });\n    });\n  }\n}\n</script>\n"],"sourceRoot":"src/views/network"}]}