{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\wireless.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\wireless.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"D:\\\\Project VMODEV\\\\Horde\\\\oui\\\\oui-master\\\\oui-ui-core\\\\src\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      radios: [],\n      modes: [['ap', this.$t('Access Point')], ['sta', this.$t('Client')], ['adhoc', this.$t('Ad-Hoc')]],\n      interfaces: [],\n      encryptions: [['none', this.$t('No encryption')], ['psk', 'WPA-PSK'], ['psk2', 'WPA2-PSK'], ['psk-mixed', 'WPA/WPA2-PSK ' + this.$t('mixed')]],\n      ciphers: [['auto', this.$t('auto')], ['ccmp', this.$t('Force CCMP (AES)')], ['tkip', this.$t('Force TKIP')], ['tkip+ccmp', this.$t('Force TKIP and CCMP (AES)')]],\n      macfilters: [['allow', this.$t('Allow listed only')], ['deny', this.$t('Allow all except listed')]]\n    };\n  },\n  methods: {\n    filterInterface: function filterInterface(s, self) {\n      return self.options.radio === s.device;\n    },\n    afterAddIface: function afterAddIface(sid, self) {\n      this.$uci.set('wireless', sid, 'device', self.options.radio);\n    },\n    loadEncr: function loadEncr(sid) {\n      var _split = (this.$uci.get('wireless', sid, 'encryption') || '').split('+'),\n          _split2 = _slicedToArray(_split, 1),\n          v = _split2[0];\n\n      return v;\n    },\n    loadCipher: function loadCipher(sid) {\n      var v = (this.$uci.get('wireless', sid, 'encryption') || '').split('+');\n      if (v.length < 2) return 'auto';\n      v = v.slice(1).join('+');\n      if (v === 'aes') v = 'ccmp';else if (v === 'tkip+aes' || v === 'aes+tkip' || v === 'ccmp+tkip') v = 'tkip+ccmp';\n      return v;\n    },\n    saveEncr: function saveEncr(sid, value, self) {\n      var cipher = self.uciSection.formValue('cipher', sid);\n      if (cipher === 'tkip' || cipher === 'ccmp' || cipher === 'tkip+ccmp') value = \"\".concat(value, \"+\").concat(cipher);\n      this.$uci.set('wireless', sid, 'encryption', value);\n    },\n    saveCipher: function saveCipher(sid, value, self) {\n      var encr = self.uciSection.formValue('encryption', sid);\n      if (value === 'tkip' || value === 'ccmp' || value === 'tkip+ccmp') encr = \"\".concat(encr, \"+\").concat(value);\n      this.$uci.set('wireless', sid, 'encryption', encr);\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    var loading = this.$getLoading();\n    this.$uci.load('wireless').then(function () {\n      var sections = _this.$uci.sections('wireless', 'wifi-device');\n\n      var radios_num = sections.length;\n      sections.forEach(function (s) {\n        var device = s['.name'];\n        var batch = [];\n        batch.push(['iwinfo', 'info', {\n          device: device\n        }]);\n        batch.push(['iwinfo', 'freqlist', {\n          device: device\n        }]);\n        batch.push(['iwinfo', 'txpowerlist', {\n          device: device\n        }]);\n        batch.push(['iwinfo', 'countrylist', {\n          device: device\n        }]);\n\n        _this.$ubus.callBatch(batch).then(function (rs) {\n          var channels = [['auto', _this.$t('Automatic')]];\n          var info = rs[0];\n          var freqlist = rs[1].results;\n          var txpowerlist = [];\n          var countrylist = [];\n          freqlist.forEach(function (f) {\n            if (f.restricted) return;\n            channels.push([f.channel, \"\".concat(f.channel, \" (\").concat(f.mhz, \" MHz)\")]);\n          });\n          rs[2].results.forEach(function (tx) {\n            txpowerlist.push([tx.dbm, \"\".concat(tx.dbm, \" dBm (\").concat(tx.mw, \" mW)\")]);\n          });\n          rs[3].results.forEach(function (c) {\n            countrylist.push([c.code, \"\".concat(c.code, \" - \").concat(c.country)]);\n          });\n          var hwmodes = ['11g'];\n          if (info.hwmodes.indexOf('a') > -1 || info.hwmodes.indexOf('ac') > -1) hwmodes.push('11a');\n\n          _this.radios.push({\n            name: device,\n            channel: info.channel,\n            txpower: info.txpower,\n            country: info.country,\n            hardware: info.hardware.name,\n            hwmodes: hwmodes,\n            htmodes: info.htmodes,\n            channels: channels,\n            txpowerlist: txpowerlist,\n            countrylist: countrylist\n          });\n\n          radios_num--;\n          if (radios_num === 0) loading.close();\n        });\n      });\n    });\n    this.$network.load().then(function () {\n      var interfaces = _this.$network.getInterfaces();\n\n      _this.interfaces = interfaces.map(function (item) {\n        return item.name;\n      });\n    });\n  }\n};",{"version":3,"sources":["wireless.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-tabs v-if=\"radios.length > 0\" :value=\"radios[0].name\">\n    <el-tab-pane v-for=\"radio in radios\" :key=\"radio.name\" :name=\"radio.name\" :label=\"radio.name + ` (${radio.hardware})`\">\n      <uci-form config=\"wireless\" :apply-timeout=\"15\">\n        <uci-section :name=\"radio.name\">\n          <uci-tab :title=\"$t('General Settings')\" name=\"general\">\n            <uci-option-switch :label=\"$t('Disabled')\" name=\"disabled\"></uci-option-switch>\n            <uci-option-list :label=\"$t('Mode')\" name=\"hwmode\" :options=\"radio.hwmodes\" required></uci-option-list>\n            <uci-option-list :label=\"$t('Band')\" name=\"htmode\" :options=\"radio.htmodes\"></uci-option-list>\n            <uci-option-list :label=\"$t('Channel')\" name=\"channel\" :options=\"radio.channels\" :initial=\"radio.channel\" required></uci-option-list>\n            <uci-option-list :label=\"$t('Transmit Power')\" name=\"txpower\" :options=\"radio.txpowerlist\" :initial=\"radio.txpower\" required></uci-option-list>\n          </uci-tab>\n          <uci-tab :title=\"$t('Advanced Settings')\" name=\"advanced\">\n            <uci-option-list :label=\"$t('Country Code')\" name=\"country\" :options=\"radio.countrylist\" :initial=\"radio.country\" required></uci-option-list>\n            <uci-option-input :label=\"$t('Distance Optimization')\" name=\"distance\" rules=\"uinteger\"></uci-option-input>\n          </uci-tab>\n        </uci-section>\n        <uci-section :title=\"$t('Interface')\" type=\"wifi-iface\" :options=\"{radio: radio.name}\" :filter=\"filterInterface\" addable :after-add=\"afterAddIface\">\n          <uci-tab :title=\"$t('General Settings')\" name=\"general\">\n            <uci-option-switch :label=\"$t('Disabled')\" name=\"disabled\"></uci-option-switch>\n            <uci-option-list :label=\"$t('Mode')\" name=\"mode\" required :options=\"modes\"></uci-option-list>\n            <uci-option-input label=\"SSID\" name=\"ssid\" required></uci-option-input>\n            <uci-option-list :label=\"$t('Network')\" name=\"network\" :options=\"interfaces\"></uci-option-list>\n            <uci-option-switch :label=\"$t('Hide ESSID')\" name=\"hidden\" depend=\"mode == 'ap'\"></uci-option-switch>\n            <uci-option-switch :label=\"$t('WMM Mode')\" name=\"wmm\" depend=\"mode == 'ap'\" initial=\"1\"></uci-option-switch>\n          </uci-tab>\n          <uci-tab :title=\"$t('Wireless Security')\" name=\"security\">\n            <uci-option-list :label=\"$t('Encryption')\" name=\"encryption\" :options=\"encryptions\" initial=\"none\" :load=\"loadEncr\" :save=\"saveEncr\"></uci-option-list>\n            <uci-option-list :label=\"$t('Cipher')\" name=\"cipher\" depend=\"encryption != 'none'\" :options=\"ciphers\" initial=\"auto\" :load=\"loadCipher\" :save=\"saveCipher\"></uci-option-list>\n            <uci-option-input :label=\"$t('Passphrase')\" name=\"key\" depend=\"encryption != 'none'\" password></uci-option-input>\n          </uci-tab>\n          <uci-tab :title=\"$t('MAC-Filter')\" name=\"macfilter\">\n            <uci-option-list :label=\"$t('Mode')\" name=\"macfilter\" :options=\"macfilters\" depend=\"mode == 'ap'\"></uci-option-list>\n            <uci-option-dlist :label=\"$t('MAC-List')\" name=\"maclist\" depend=\"macfilter == 'allow' || macfilter == 'deny'\" rules=\"macaddr\"></uci-option-dlist>\n          </uci-tab>\n        </uci-section>\n      </uci-form>\n    </el-tab-pane>\n  </el-tabs>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      radios: [],\n      modes: [\n        ['ap', this.$t('Access Point')],\n        ['sta', this.$t('Client')],\n        ['adhoc', this.$t('Ad-Hoc')]\n      ],\n      interfaces: [],\n      encryptions: [\n        ['none', this.$t('No encryption')],\n        ['psk', 'WPA-PSK'],\n        ['psk2', 'WPA2-PSK'],\n        ['psk-mixed', 'WPA/WPA2-PSK ' + this.$t('mixed')]\n      ],\n      ciphers: [\n        ['auto', this.$t('auto')],\n        ['ccmp', this.$t('Force CCMP (AES)')],\n        ['tkip', this.$t('Force TKIP')],\n        ['tkip+ccmp', this.$t('Force TKIP and CCMP (AES)')]\n      ],\n      macfilters: [\n        ['allow', this.$t('Allow listed only')],\n        ['deny', this.$t('Allow all except listed')]\n      ]\n    }\n  },\n  methods: {\n    filterInterface(s, self) {\n      return self.options.radio === s.device;\n    },\n    afterAddIface(sid, self) {\n      this.$uci.set('wireless', sid, 'device', self.options.radio);\n    },\n    loadEncr(sid) {\n      const [v] = (this.$uci.get('wireless', sid, 'encryption') || '').split('+');\n      return v;\n    },\n    loadCipher(sid) {\n      let v = (this.$uci.get('wireless', sid, 'encryption') || '').split('+');\n\n      if (v.length < 2)\n        return 'auto';\n\n      v = v.slice(1).join('+');\n\n      if (v === 'aes')\n        v = 'ccmp';\n      else if (v === 'tkip+aes' || v === 'aes+tkip' || v === 'ccmp+tkip')\n        v = 'tkip+ccmp';\n\n      return v;\n    },\n    saveEncr(sid, value, self) {\n      let cipher = self.uciSection.formValue('cipher', sid);\n\n      if (cipher === 'tkip' || cipher === 'ccmp' || cipher === 'tkip+ccmp')\n        value = `${value}+${cipher}`;\n\n      this.$uci.set('wireless', sid, 'encryption', value);\n    },\n    saveCipher(sid, value, self) {\n      let encr = self.uciSection.formValue('encryption', sid);\n\n      if (value === 'tkip' || value === 'ccmp' || value === 'tkip+ccmp')\n        encr = `${encr}+${value}`;\n\n      this.$uci.set('wireless', sid, 'encryption', encr);\n    }\n  },\n  created() {\n    const loading = this.$getLoading();\n\n    this.$uci.load('wireless').then(() => {\n      const sections = this.$uci.sections('wireless', 'wifi-device');\n      let radios_num = sections.length;\n\n      sections.forEach(s => {\n        const device = s['.name'];\n        const batch = [];\n\n        batch.push(['iwinfo', 'info', {device}]);\n        batch.push(['iwinfo', 'freqlist', {device}]);\n        batch.push(['iwinfo', 'txpowerlist', {device}]);\n        batch.push(['iwinfo', 'countrylist', {device}]);\n\n        this.$ubus.callBatch(batch).then(rs => {\n          const channels = [['auto', this.$t('Automatic')]];\n          const info = rs[0];\n          const freqlist = rs[1].results\n          const txpowerlist = [];\n          const countrylist = [];\n\n          freqlist.forEach(f => {\n            if (f.restricted)\n              return;\n            channels.push([f.channel, `${f.channel} (${f.mhz} MHz)`]);\n          });\n\n          rs[2].results.forEach(tx => {\n            txpowerlist.push([tx.dbm, `${tx.dbm} dBm (${tx.mw} mW)`]);\n          });\n\n          rs[3].results.forEach(c => {\n            countrylist.push([c.code, `${c.code} - ${c.country}`]);\n          });\n\n          const hwmodes = ['11g'];\n\n          if (info.hwmodes.indexOf('a') > -1 || info.hwmodes.indexOf('ac') > -1)\n            hwmodes.push('11a');\n\n          this.radios.push({\n            name: device,\n            channel: info.channel,\n            txpower: info.txpower,\n            country: info.country,\n            hardware: info.hardware.name,\n            hwmodes: hwmodes,\n            htmodes: info.htmodes,\n            channels: channels,\n            txpowerlist: txpowerlist,\n            countrylist: countrylist\n          });\n\n          radios_num--;\n\n          if (radios_num === 0)\n            loading.close();\n        });\n      });\n    });\n\n    this.$network.load().then(() => {\n      const interfaces = this.$network.getInterfaces();\n      this.interfaces = interfaces.map(item => item.name);\n    });\n  }\n}\n</script>\n"],"sourceRoot":"src/views/network"}]}