{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\plugins\\string-format.js","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\plugins\\string-format.js","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n\nfunction formatUnit(param, base, pPrecision) {\n  var pr = pPrecision ? Math.floor(10 * parseFloat('0' + pPrecision)) : 2;\n  var units = ['', 'K', 'M', 'G', 'T', 'P', 'E'];\n  var val = parseFloat(param || 0);\n  var i = 0;\n\n  for (i = 0; i < units.length && val >= base; i++) {\n    val /= base;\n  }\n\n  return val.toFixed(pr) + ' ' + units[i];\n}\n\nfunction formatTime(param) {\n  var ts = param || 0;\n  var tm = 0;\n  var th = 0;\n  var td = 0;\n\n  if (ts > 59) {\n    tm = Math.floor(ts / 60);\n    ts = ts % 60;\n  }\n\n  if (tm > 59) {\n    th = Math.floor(tm / 60);\n    tm = tm % 60;\n  }\n\n  if (th > 23) {\n    td = Math.floor(th / 24);\n    th = th % 24;\n  }\n\n  return td > 0 ? '%dd %dh %dm %ds'.format(td, th, tm, ts) : '%dh %dm %ds'.format(th, tm, ts);\n}\n\nString.prototype.format = function () {\n  var str = this;\n  var out = '';\n  var re = /^(([^%]*)%('.|0|\\x20)?(-)?(\\d+)?(\\.\\d+)?(%|b|c|d|u|f|o|s|x|X|t|m|M|))/;\n  var a = [];\n  var numSubstitutions = 0;\n  var subst = '';\n\n  while ((a = re.exec(str)) !== null) {\n    var m = a[1];\n    var leftpart = a[2],\n        pPad = a[3],\n        pJustify = a[4],\n        pMinLength = a[5];\n    var pPrecision = a[6],\n        pType = a[7];\n\n    if (pType === '%') {\n      subst = '%';\n    } else {\n      if (numSubstitutions < arguments.length) {\n        var param = arguments[numSubstitutions++];\n        var pad = ' ';\n        if (pPad && pPad.substr(0, 1) === '\\'') pad = leftpart.substr(1, 1);else if (pPad) pad = pPad;\n        var justifyRight = true;\n        if (pJustify && pJustify === '-') justifyRight = false;\n        var minLength = -1;\n        if (pMinLength) minLength = parseInt(pMinLength);\n        var precision = -1;\n        if (pPrecision && pType === 'f') precision = parseInt(pPrecision.substring(1));\n        subst = param;\n\n        switch (pType) {\n          case 'b':\n            subst = (parseInt(param) || 0).toString(2);\n            break;\n\n          case 'c':\n            subst = String.fromCharCode(parseInt(param) || 0);\n            break;\n\n          case 'd':\n            subst = parseInt(param) || 0;\n            break;\n\n          case 'u':\n            subst = Math.abs(parseInt(param) || 0);\n            break;\n\n          case 'f':\n            subst = precision > -1 ? (parseFloat(param) || 0.0).toFixed(precision) : parseFloat(param) || 0.0;\n            break;\n\n          case 'o':\n            subst = (parseInt(param) || 0).toString(8);\n            break;\n\n          case 's':\n            subst = param;\n            break;\n\n          case 'x':\n            subst = ('' + (parseInt(param) || 0).toString(16)).toLowerCase();\n            break;\n\n          case 'X':\n            subst = ('' + (parseInt(param) || 0).toString(16)).toUpperCase();\n            break;\n\n          case 't':\n            subst = formatTime(param);\n            break;\n\n          case 'm':\n            subst = formatUnit(param, 1000, pPrecision);\n            break;\n\n          case 'M':\n            subst = formatUnit(param, 1024, pPrecision);\n            break;\n        }\n\n        subst = typeof subst === 'undefined' ? '' : subst.toString();\n\n        if (minLength > 0 && pad.length > 0) {\n          var padLength = minLength - subst.length;\n\n          for (var i = 0; i < padLength; i++) {\n            subst = justifyRight ? pad + subst : subst + pad;\n          }\n        }\n      }\n    }\n\n    out += leftpart + subst;\n    str = str.substr(m.length);\n  }\n\n  return out + str;\n};",{"version":3,"sources":["D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\plugins\\string-format.js"],"names":["formatUnit","param","base","pPrecision","pr","Math","floor","parseFloat","units","val","i","length","toFixed","formatTime","ts","tm","th","td","format","String","prototype","str","out","re","a","numSubstitutions","subst","exec","m","leftpart","pPad","pJustify","pMinLength","pType","arguments","pad","substr","justifyRight","minLength","parseInt","precision","substring","toString","fromCharCode","abs","toLowerCase","toUpperCase","padLength"],"mappings":"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","sourcesContent":["function formatUnit(param, base, pPrecision) {\n  let pr = pPrecision ? Math.floor(10 * parseFloat('0' + pPrecision)) : 2;\n  let units = ['', 'K', 'M', 'G', 'T', 'P', 'E'];\n  let val = parseFloat(param || 0);\n  let i = 0;\n\n  for (i = 0; (i < units.length) && (val >= base); i++)\n    val /= base;\n\n  return val.toFixed(pr) + ' ' + units[i];\n}\n\nfunction formatTime(param) {\n  let ts = param || 0;\n  let tm = 0;\n  let th = 0;\n  let td = 0;\n\n  if (ts > 59) {\n    tm = Math.floor(ts / 60);\n    ts = ts % 60;\n  }\n\n  if (tm > 59) {\n    th = Math.floor(tm / 60);\n    tm = tm % 60;\n  }\n\n  if (th > 23) {\n    td = Math.floor(th / 24);\n    th = th % 24;\n  }\n\n  return td > 0 ? '%dd %dh %dm %ds'.format(td, th, tm, ts) : '%dh %dm %ds'.format(th, tm, ts);\n}\n\nString.prototype.format = function() {\n  let str = this;\n  let out = '';\n  let re = /^(([^%]*)%('.|0|\\x20)?(-)?(\\d+)?(\\.\\d+)?(%|b|c|d|u|f|o|s|x|X|t|m|M|))/;\n  let a = [];\n  let numSubstitutions = 0;\n  let subst = '';\n\n  while ((a = re.exec(str)) !== null) {\n    let m = a[1];\n    let leftpart = a[2], pPad = a[3], pJustify = a[4], pMinLength = a[5];\n    let pPrecision = a[6], pType = a[7];\n\n    if (pType === '%') {\n      subst = '%';\n    } else {\n      if (numSubstitutions < arguments.length) {\n        let param = arguments[numSubstitutions++];\n\n        let pad = ' ';\n        if (pPad && pPad.substr(0, 1) === '\\'')\n          pad = leftpart.substr(1, 1);\n        else if (pPad)\n          pad = pPad;\n\n        let justifyRight = true;\n        if (pJustify && pJustify === '-')\n          justifyRight = false;\n\n        let minLength = -1;\n        if (pMinLength)\n          minLength = parseInt(pMinLength);\n\n        let precision = -1;\n        if (pPrecision && pType === 'f')\n          precision = parseInt(pPrecision.substring(1));\n\n        subst = param;\n\n        switch (pType) {\n        case 'b':\n          subst = (parseInt(param) || 0).toString(2);\n          break;\n\n        case 'c':\n          subst = String.fromCharCode(parseInt(param) || 0);\n          break;\n\n        case 'd':\n          subst = (parseInt(param) || 0);\n          break;\n\n        case 'u':\n          subst = Math.abs(parseInt(param) || 0);\n          break;\n\n        case 'f':\n          subst = (precision > -1) ? ((parseFloat(param) || 0.0)).toFixed(precision) : (parseFloat(param) || 0.0);\n          break;\n\n        case 'o':\n          subst = (parseInt(param) || 0).toString(8);\n          break;\n\n        case 's':\n          subst = param;\n          break;\n\n        case 'x':\n          subst = ('' + (parseInt(param) || 0).toString(16)).toLowerCase();\n          break;\n\n        case 'X':\n          subst = ('' + (parseInt(param) || 0).toString(16)).toUpperCase();\n          break;\n\n        case 't':\n          subst = formatTime(param);\n          break;\n\n        case 'm':\n          subst = formatUnit(param, 1000, pPrecision);\n          break;\n\n        case 'M':\n          subst = formatUnit(param, 1024, pPrecision);\n          break;\n        }\n\n        subst = (typeof(subst) === 'undefined') ? '' : subst.toString();\n\n        if (minLength > 0 && pad.length > 0) {\n          let padLength = minLength - subst.length;\n          for (let i = 0; i < padLength; i++)\n            subst = justifyRight ? (pad + subst) : (subst + pad);\n        }\n      }\n    }\n\n    out += leftpart + subst;\n    str = str.substr(m.length);\n  }\n\n  return out + str;\n}\n"]}]}