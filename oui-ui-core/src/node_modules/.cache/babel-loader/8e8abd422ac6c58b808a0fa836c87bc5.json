{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\system\\users.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\system\\users.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\Project VMODEV\\\\Horde\\\\oui\\\\oui-master\\\\oui-ui-core\\\\src\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.match\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      groups: null\n    };\n  },\n  methods: {\n    cryptPassword: function cryptPassword(data) {\n      return this.$ubus.call('oui.ui', 'crypt', {\n        data: data\n      });\n    },\n    callACLs: function callACLs() {\n      return this.$ubus.call('oui.ui', 'acls');\n    },\n    isShadow: function isShadow(sid) {\n      var r = false;\n      var pw = this.$uci.get('rpcd', sid, 'password');\n      if (pw && pw.indexOf('$p$') === 0) r = true;\n      return r;\n    },\n    shadowChanged: function shadowChanged(v, sid, self) {\n      var s = self.uciSection;\n      var pw = s.formValue('password', sid);\n      if (!v && pw && pw.indexOf('$p$') === 0) s.setFormValue('password', sid, '');\n    },\n    doSavePasswd: function doSavePasswd(s, sid) {\n      var _this = this;\n\n      var username = s.formValue('username', sid);\n      var sh = s.formValue('shadow', sid);\n      var pw = s.formValue('password', sid);\n      if (sh) pw = '$p$' + username;\n\n      if (pw.match(/^\\$[0-9p][a-z]?\\$/)) {\n        if (pw !== this.$uci.get('rpcd', sid, 'password')) this.$uci.set('rpcd', sid, 'password', pw);\n      } else {\n        return new Promise(function (resolve) {\n          _this.cryptPassword(pw).then(function (_ref) {\n            var crypt = _ref.crypt;\n            if (crypt !== _this.$uci.get('rpcd', sid, 'password')) _this.$uci.set('rpcd', sid, 'password', crypt);\n            resolve();\n          });\n        });\n      }\n    },\n    saveShadow: function saveShadow(sid, value, self) {\n      return this.doSavePasswd(self.uciSection, sid);\n    },\n    savePasswd: function savePasswd(sid, value, self) {\n      return this.doSavePasswd(self.uciSection, sid);\n    },\n    addUser: function addUser(self) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.$prompt(_this2.$t('Please input a username'), _this2.$t('Add'), {\n          inputValidator: function inputValidator(value) {\n            if (!value) return true;\n            var sections = self.sections;\n\n            for (var i = 0; i < sections.length; i++) {\n              if (sections[i].username === value) return _this2.$t('Username already used');\n            }\n\n            return true;\n          }\n        }).then(function (r) {\n          if (!r.value) return;\n\n          var sid = _this2.$uci.add('rpcd', 'login');\n\n          _this2.$uci.set('rpcd', sid, 'username', r.value);\n\n          resolve(sid);\n        });\n      });\n    },\n    mergeACLScope: function mergeACLScope(aclScope, scope) {\n      if (Array.isArray(scope)) {\n        scope.forEach(function (name) {\n          aclScope[name] = true;\n        });\n      } else {\n        var _loop = function _loop(name) {\n          if (!Array.isArray(scope[name])) return \"continue\";\n          var aclObject = aclScope[name] || (aclScope[name] = {});\n          scope[name].forEach(function (s) {\n            aclObject[s] = true;\n          });\n        };\n\n        for (var name in scope) {\n          var _ret = _loop(name);\n\n          if (_ret === \"continue\") continue;\n        }\n      }\n    },\n    mergeACLPermission: function mergeACLPermission(aclPerm, perm) {\n      for (var name in perm) {\n        var aclScope = aclPerm[name] || (aclPerm[name] = {});\n        this.mergeACLScope(aclScope, perm[name]);\n      }\n    },\n    mergeACLGroup: function mergeACLGroup(aclAroup, group) {\n      if (!aclAroup.description) aclAroup.description = group.description;\n\n      if (group.read) {\n        var aclPerm = aclAroup.read || (aclAroup.read = {});\n        this.mergeACLPermission(aclPerm, group.read);\n      }\n\n      if (group.write) {\n        var _aclPerm = aclAroup.write || (aclAroup.write = {});\n\n        this.mergeACLPermission(_aclPerm, group.write);\n      }\n    },\n    aclMatch: function aclMatch(list, group) {\n      if (list.indexOf('!' + group) > -1) return false;\n      if (list.indexOf(group) > -1) return true;\n      if (list[0] === '*') return true;\n    },\n    loadGroups: function loadGroups() {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        if (_this3.groups) {\n          resolve();\n          return;\n        }\n\n        _this3.callACLs().then(function (r) {\n          var acls = {};\n          r.acls.forEach(function (tree) {\n            for (var name in tree) {\n              var aclAroup = acls[name] || (acls[name] = {});\n\n              _this3.mergeACLGroup(aclAroup, tree[name]);\n            }\n          });\n          var groups = [];\n\n          for (var groupName in acls) {\n            if (groupName === 'unauthenticated') continue;\n            groups.push({\n              description: _this3.$t(acls[groupName].description),\n              name: groupName\n            });\n          }\n\n          _this3.groups = groups;\n          resolve();\n        });\n      });\n    },\n    loadAcls: function loadAcls(sid) {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        _this4.loadGroups().then(function () {\n          var readList = _this4.$uci.get('rpcd', sid, 'read') || [];\n          var writeList = _this4.$uci.get('rpcd', sid, 'write') || [];\n          var groups = [];\n\n          _this4.groups.forEach(function (g) {\n            var r = _this4.aclMatch(readList, g.name);\n\n            var w = _this4.aclMatch(writeList, g.name);\n\n            groups.push(_objectSpread({\n              acl: w ? 'f' : r ? 'r' : 'n'\n            }, g));\n          });\n\n          resolve(groups);\n        });\n      });\n    },\n    aclToUCI: function aclToUCI(list) {\n      if (list.length < this.groups.length / 2) return list;\n      var set = {};\n      list.forEach(function (v) {\n        set[v] = true;\n      });\n      var rv = ['*'];\n      this.groups.forEach(function (g) {\n        if (!set[g.name]) rv.push('!' + g.name);\n      });\n      return rv;\n    },\n    saveAcls: function saveAcls(sid, value) {\n      var readList = [];\n      var writeList = [];\n      value.forEach(function (group) {\n        var name = group.name;\n        var acl = group.acl;\n\n        if (acl === 'f') {\n          readList.push(name);\n          writeList.push(name);\n        } else if (acl === 'r') {\n          readList.push(name);\n        }\n      });\n      readList = this.aclToUCI(readList);\n      writeList = this.aclToUCI(writeList);\n      var originalReadList = this.$uci.get('rpcd', sid, 'read') || [];\n      var originalWriteList = this.$uci.get('rpcd', sid, 'write') || [];\n      if (!window.oui.isEqual(readList, originalReadList)) this.$uci.set('rpcd', sid, 'read', this.aclToUCI(readList));\n      if (!window.oui.isEqual(writeList, originalWriteList)) this.$uci.set('rpcd', sid, 'write', this.aclToUCI(writeList));\n    },\n    onApplied: function onApplied() {\n      this.$session.updateACLs();\n    }\n  }\n};",{"version":3,"sources":["users.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <uci-form config=\"rpcd\" @applied=\"onApplied\">\n    <uci-section type=\"login\" addable :teasers=\"['username', 'shadow']\" :add=\"addUser\">\n      <uci-option-dummy :label=\"$t('Username')\" name=\"username\"></uci-option-dummy>\n      <uci-option-switch :label=\"$t('Use the Linux system user password')\" name=\"shadow\" :load=\"isShadow\" @change=\"shadowChanged\" :save=\"saveShadow\"></uci-option-switch>\n      <uci-option-input :label=\"$t('Password')\" name=\"password\" depend=\"!shadow\" required password :description=\"$t('acl-password-description')\" :save=\"savePasswd\"></uci-option-input>\n      <uci-option :label=\"$t('User ACLs')\" name=\"acls\" :load=\"loadAcls\" :save=\"saveAcls\" :description=\"$t('acl-acl-description')\">\n        <template v-slot=\"{value}\">\n          <el-table :data=\"value || []\" class=\"oui-acls-table\">\n            <el-table-column :label=\"$t('ACL Group')\" prop=\"description\"></el-table-column>\n            <el-table-column :label=\"$t('N')\" width=\"30\">\n              <template v-slot=\"{row}\">\n                <el-radio v-model=\"row.acl\" label=\"n\"></el-radio>\n              </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('R')\" width=\"30\">\n              <template v-slot=\"{row}\">\n                <el-radio v-model=\"row.acl\" label=\"r\"></el-radio>\n              </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('F')\" width=\"30\">\n              <template v-slot=\"{row}\">\n                <el-radio v-model=\"row.acl\" label=\"f\"></el-radio>\n              </template>\n            </el-table-column>\n          </el-table>\n        </template>\n      </uci-option>\n    </uci-section>\n  </uci-form>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      groups: null\n    }\n  },\n  methods: {\n    cryptPassword(data) {\n      return this.$ubus.call('oui.ui', 'crypt', {data});\n    },\n    callACLs() {\n      return this.$ubus.call('oui.ui', 'acls');\n    },\n    isShadow(sid) {\n      let r = false;\n      const pw = this.$uci.get('rpcd', sid, 'password');\n      if (pw && pw.indexOf('$p$') === 0)\n        r = true;\n      return r;\n    },\n    shadowChanged(v, sid, self) {\n      const s = self.uciSection;\n      const pw = s.formValue('password', sid);\n\n      if (!v && pw && pw.indexOf('$p$') === 0)\n        s.setFormValue('password', sid, '');\n    },\n    doSavePasswd(s, sid) {\n      const username = s.formValue('username', sid);\n      const sh = s.formValue('shadow', sid);\n      let pw = s.formValue('password', sid);\n\n      if (sh)\n        pw = '$p$' + username;\n\n      if (pw.match(/^\\$[0-9p][a-z]?\\$/)) {\n        if (pw !== this.$uci.get('rpcd', sid, 'password'))\n          this.$uci.set('rpcd', sid, 'password', pw);\n      } else {\n        return new Promise(resolve => {\n          this.cryptPassword(pw).then(({crypt}) => {\n            if (crypt !== this.$uci.get('rpcd', sid, 'password'))\n              this.$uci.set('rpcd', sid, 'password', crypt);\n            resolve();\n          });\n        });\n      }\n    },\n    saveShadow(sid, value, self) {\n      return this.doSavePasswd(self.uciSection, sid);\n    },\n    savePasswd(sid, value, self) {\n      return this.doSavePasswd(self.uciSection, sid);\n    },\n    addUser(self) {\n      return new Promise(resolve => {\n        this.$prompt(this.$t('Please input a username'), this.$t('Add'), {\n          inputValidator: value => {\n            if (!value)\n              return true;\n\n            const sections = self.sections;\n            for (let i = 0; i < sections.length; i++)\n              if (sections[i].username === value)\n                return this.$t('Username already used');\n\n            return true;\n          }\n        }).then(r => {\n          if (!r.value)\n            return;\n\n          const sid = this.$uci.add('rpcd', 'login');\n          this.$uci.set('rpcd', sid, 'username', r.value);\n          resolve(sid);\n        });\n      });\n    },\n    mergeACLScope(aclScope, scope) {\n      if (Array.isArray(scope)) {\n        scope.forEach(name => {\n          aclScope[name] = true;\n        });\n      } else {\n        for (const name in scope) {\n          if (!Array.isArray(scope[name]))\n            continue;\n          const aclObject = aclScope[name] || (aclScope[name] = {});\n          scope[name].forEach(s => {\n            aclObject[s] = true;\n          });\n        }\n      }\n    },\n    mergeACLPermission(aclPerm, perm) {\n      for (const name in perm) {\n        const aclScope = aclPerm[name] || (aclPerm[name] = {});\n        this.mergeACLScope(aclScope, perm[name]);\n      }\n    },\n    mergeACLGroup(aclAroup, group) {\n      if (!aclAroup.description)\n        aclAroup.description = group.description;\n\n      if (group.read) {\n        const aclPerm = aclAroup.read || (aclAroup.read = {});\n        this.mergeACLPermission(aclPerm, group.read);\n      }\n\n      if (group.write) {\n        const aclPerm = aclAroup.write || (aclAroup.write = {});\n        this.mergeACLPermission(aclPerm, group.write);\n      }\n    },\n    aclMatch(list, group) {\n      if (list.indexOf('!' + group) > -1)\n        return false;\n\n      if (list.indexOf(group) > -1)\n        return true;\n\n      if (list[0] === '*')\n        return true;\n    },\n    loadGroups() {\n      return new Promise(resolve => {\n        if (this.groups) {\n          resolve();\n          return;\n        }\n\n        this.callACLs().then(r => {\n          const acls = {};\n\n          r.acls.forEach(tree => {\n            for (const name in tree) {\n              const aclAroup = acls[name] || (acls[name] = {});\n              this.mergeACLGroup(aclAroup, tree[name]);\n            }\n          });\n\n          const groups = [];\n\n          for (const groupName in acls) {\n            if (groupName === 'unauthenticated')\n              continue;\n            groups.push({\n              description: this.$t(acls[groupName].description),\n              name: groupName\n            });\n          }\n\n          this.groups = groups;\n          resolve();\n        });\n      });\n    },\n    loadAcls(sid) {\n      return new Promise(resolve => {\n        this.loadGroups().then(() => {\n          const readList = this.$uci.get('rpcd', sid, 'read') || [];\n          const writeList = this.$uci.get('rpcd', sid, 'write') || [];\n          const groups = [];\n\n          this.groups.forEach(g => {\n            const r = this.aclMatch(readList, g.name);\n            const w = this.aclMatch(writeList, g.name);\n\n            groups.push({\n              acl: w ? 'f' : (r ? 'r' : 'n'),\n              ...g\n            });\n          });\n\n          resolve(groups);\n        });\n      });\n    },\n    aclToUCI(list) {\n      if (list.length < this.groups.length / 2)\n        return list;\n\n      const set = {};\n      list.forEach(v => {\n        set[v] = true;\n      });\n\n      const rv = ['*'];\n\n      this.groups.forEach(g => {\n        if (!set[g.name])\n          rv.push('!' + g.name);\n      });\n\n      return rv;\n    },\n    saveAcls(sid, value) {\n      let readList = [];\n      let writeList = [];\n\n      value.forEach(group => {\n        const name = group.name;\n        const acl = group.acl;\n        if (acl === 'f') {\n          readList.push(name);\n          writeList.push(name);\n        } else if (acl === 'r') {\n          readList.push(name);\n        }\n      });\n\n      readList = this.aclToUCI(readList);\n      writeList = this.aclToUCI(writeList);\n\n      const originalReadList = this.$uci.get('rpcd', sid, 'read') || [];\n      const originalWriteList = this.$uci.get('rpcd', sid, 'write') || [];\n\n      if (!window.oui.isEqual(readList, originalReadList))\n        this.$uci.set('rpcd', sid, 'read', this.aclToUCI(readList));\n\n      if (!window.oui.isEqual(writeList, originalWriteList))\n        this.$uci.set('rpcd', sid, 'write', this.aclToUCI(writeList));\n    },\n    onApplied() {\n      this.$session.updateACLs();\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.oui-acls-table {\n  .el-radio__label {\n    display: none;\n  }\n}\n</style>\n"],"sourceRoot":"src/views/system"}]}