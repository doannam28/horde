{"remainingRequest":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\interfaces\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\interfaces\\index.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport NetworkBadge from \"./network-badge.vue\";\nimport ProtoDhcp from \"./proto/dhcp.vue\";\nimport ProtoStatic from \"./proto/static.vue\";\nimport ProtoPppoe from \"./proto/pppoe.vue\";\nimport ProtoPptp from \"./proto/pptp.vue\";\nimport ProtoL2tp from \"./proto/l2tp.vue\";\nimport Proto3g from \"./proto/3g.vue\";\nimport Ifname from \"./ifname.vue\";\nexport default {\n  data: function data() {\n    return {\n      proto: '',\n      virtual: false,\n      floating: false,\n      interfaces: [],\n      devices: [],\n      zones: [],\n      dialogVisible: false,\n      editorIface: '',\n      protocols: [['none', this.$t('Unmanaged')], ['dhcp', this.$t('DHCP Client')], ['static', this.$t('Static address')], ['pppoe', 'PPPoE'], ['pptp', 'PPtP'], ['l2tp', 'L2TP'], ['3g', '3G']]\n    };\n  },\n  components: {\n    NetworkBadge: NetworkBadge,\n    ProtoDhcp: ProtoDhcp,\n    ProtoStatic: ProtoStatic,\n    ProtoPppoe: ProtoPppoe,\n    ProtoPptp: ProtoPptp,\n    ProtoL2tp: ProtoL2tp,\n    Proto3g: Proto3g,\n    Ifname: Ifname\n  },\n  computed: {\n    dialogTitle: function dialogTitle() {\n      return \"\".concat(this.$t('Configure'), \" \\\"\").concat(this.editorIface, \"\\\"\");\n    }\n  },\n  timers: {\n    load: {\n      time: 3000,\n      autostart: true,\n      immediate: true,\n      repeat: true\n    }\n  },\n  methods: {\n    load: function load() {\n      var _this = this;\n\n      this.$network.load().then(function () {\n        _this.interfaces = _this.$network.getInterfaces();\n      });\n    },\n    protoChanged: function protoChanged(proto) {\n      this.proto = proto;\n    },\n    onProtoMounted: function onProtoMounted(proto) {\n      this.virtual = proto.virtual;\n      this.floating = proto.floating;\n    },\n    saveType: function saveType(sid, value) {\n      this.$uci.set('network', sid, 'type', value || '');\n    },\n    loadZone: function loadZone() {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.$firewall.load().then(function () {\n          _this2.zones = _this2.$firewall.zones.map(function (z) {\n            return z.name();\n          });\n\n          var z = _this2.$firewall.findZoneByNetwork(_this2.editorIface);\n\n          if (z) resolve(z.name());\n          resolve();\n        });\n      });\n    },\n    saveZone: function saveZone(sid, value) {\n      var z = this.$firewall.findZoneByNetwork(this.editorIface);\n\n      if (!value) {\n        if (z) z.delNetwork(this.editorIface);\n        return;\n      }\n\n      if (z) {\n        if (value === z.name()) return;\n        z.delNetwork(this.editorIface);\n      }\n\n      z = this.$firewall.findZoneByName(value);\n      if (!z) z = this.$firewall.createZone(value);\n      z.addNetwork(this.editorIface);\n    },\n    edit: function edit(iface) {\n      this.editorIface = iface;\n      this.dialogVisible = true;\n    },\n    ifup: function ifup(name) {\n      this.$ubus.call('oui.network', 'ifup', {\n        name: name\n      });\n    },\n    ifdown: function ifdown(name) {\n      this.$ubus.call('oui.network', 'ifdown', {\n        name: name\n      });\n    },\n    del: function del(name) {\n      var _this3 = this;\n\n      this.$confirm(this.$t('Really delete this interface? The deletion cannot be undone!You might lose access to this device if you are connected via this interface.'), \"\".concat(this.$t('Delete interface'), \" \\\"\").concat(name, \"\\\"\")).then(function () {\n        var loading = _this3.$getLoading();\n\n        _this3.$uci.del('network', name);\n\n        _this3.$uci.save().then(function () {\n          _this3.$uci.apply().then(function () {\n            _this3.load();\n\n            loading.close();\n          });\n        });\n      });\n    },\n    add: function add(name) {\n      var _this4 = this;\n\n      var loading = this.$getLoading();\n      this.$uci.add('network', 'interface', name);\n      this.$uci.save().then(function () {\n        _this4.$uci.apply().then(function () {\n          _this4.load();\n\n          loading.close();\n        });\n      });\n    },\n    handleAdd: function handleAdd() {\n      var _this5 = this;\n\n      this.$prompt(this.$t('Please input a name'), this.$t('Add'), {\n        inputValidator: function inputValidator(value) {\n          if (!value || value.match(/^[a-zA-Z0-9_]+$/) === null) return _this5.$t('Must be a valid UCI identifier');\n\n          for (var i = 0; i < _this5.interfaces.length; i++) {\n            if (_this5.interfaces[i].name === value) return _this5.$t('Name already used');\n          }\n\n          return true;\n        }\n      }).then(function (r) {\n        _this5.add(r.value);\n      });\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <el-table :data=\"interfaces\">\n      <el-table-column :label=\"$t('Network')\" width=\"140\">\n        <template v-slot=\"{ row }\">\n          <network-badge :iface=\"row.name\" :device=\"row.getDevice() && row.getDevice().name\"></network-badge>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('Status')\">\n        <template v-slot=\"{ row }\">\n          <strong>{{ $t('Uptime') }}</strong>: {{ row.isUp() ? '%t'.format(row.getUptime()) : $t('Interface is down') }}<br/>\n          <strong>MAC</strong>: {{ row.getDevice() ? row.getDevice().macaddr : '' }}<br/>\n          <strong>RX</strong>: {{ '%mB'.format(row.getStatistics().rx_bytes) }}<br/>\n          <strong>TX</strong>: {{ '%mB'.format(row.getStatistics().tx_bytes) }}<br/>\n          <strong>IPv4</strong>: {{ row.getIPv4Addrs().join(',') }}<br/>\n          <strong>IPv6</strong>: {{ row.getIPv6Addrs().join(',') }}<br/>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"#\">\n        <template v-slot=\"{ row }\">\n          <el-button size=\"mini\" @click=\"ifup(row.name)\">{{ $t('Start') }}</el-button>\n          <el-button size=\"mini\" @click=\"ifdown(row.name)\">{{ $t('Stop') }}</el-button>\n          <el-button type=\"primary\" size=\"mini\" @click=\"edit(row.name)\">{{ $t('Edit') }}</el-button>\n          <el-button type=\"danger\" size=\"mini\" @click=\"del(row.name)\">{{ $t('Delete') }}</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-button type=\"primary\" size=\"small\" style=\"margin-top: 10px\" @click=\"handleAdd\">+ {{ $t('Add interface') }}</el-button>\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" custom-class=\"interface-edit-dialog\">\n      <uci-form config=\"network\" v-if=\"dialogVisible\" :apply-timeout=\"15\">\n        <uci-section :name=\"editorIface\">\n          <uci-tab :title=\"$t('General Settings')\" name=\"general\">\n            <uci-option-switch :label=\"$t('Start on boot')\" name=\"auto\" initial=\"1\"></uci-option-switch>\n            <uci-option-list :label=\"$t('Protocol')\" name=\"proto\" :options=\"protocols\" initial=\"none\" required @change=\"protoChanged\"></uci-option-list>\n          </uci-tab>\n          <uci-tab :title=\"$t('Advanced Settings')\" name=\"advanced\">\n            <uci-option-switch :label=\"$t('Use builtin IPv6-management')\" name=\"delegate\" initial=\"1\"></uci-option-switch>\n            <uci-option-switch :label=\"$t('Force link')\" name=\"force_link\" :initial=\"proto === 'static' ? true : false\" :description=\"$t('Set interface properties regardless of the link carrier (If set, carrier sense events do not invoke hotplug handlers).')\"></uci-option-switch>\n          </uci-tab>\n          <uci-tab :title=\"$t('Physical Settings')\" name=\"physical\">\n            <template v-if=\"!virtual\">\n              <uci-option-switch :label=\"$t('Bridge interfaces')\" name=\"type\" active-value=\"bridge\" :save=\"saveType\" depend=\"proto == 'static' || proto == 'dhcp' || proto == 'none'\" :description=\"$t('creates a bridge over specified interface(s)')\"></uci-option-switch>\n              <uci-option-switch :label=\"$t('Enable STP')\" name=\"stp\" depend=\"type\" :description=\"$t('Enables the Spanning Tree Protocol on this bridge')\"></uci-option-switch>\n              <uci-option-switch :label=\"$t('Enable IGMP')\" name=\"igmp_snooping\" depend=\"type\" :description=\"$t('Enables IGMP snooping on this bridge')\"></uci-option-switch>\n            </template>\n            <ifname v-if=\"!floating\"></ifname>\n            <ifname v-if=\"!virtual\" multiple></ifname>\n          </uci-tab>\n          <uci-tab :title=\"$t('Firewall Settings')\" name=\"firewall\">\n            <uci-option-list :label=\"$t('Create / Assign firewall-zone')\" name=\"_fwzone\" :options=\"zones\" :load=\"loadZone\" :save=\"saveZone\" allow-create :description=\"$t('interface-config-zone-desc')\"></uci-option-list>\n          </uci-tab>\n          <component v-if=\"proto !== '' && proto !== 'none'\" :is=\"'proto-' + proto\" @mounted=\"onProtoMounted\"></component>\n        </uci-section>\n      </uci-form>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport NetworkBadge from './network-badge.vue'\nimport ProtoDhcp from './proto/dhcp.vue'\nimport ProtoStatic from './proto/static.vue'\nimport ProtoPppoe from './proto/pppoe.vue'\nimport ProtoPptp from './proto/pptp.vue'\nimport ProtoL2tp from './proto/l2tp.vue'\nimport Proto3g from './proto/3g.vue'\nimport Ifname from './ifname.vue'\n\nexport default {\n  data() {\n    return {\n      proto: '',\n      virtual: false,\n      floating: false,\n      interfaces: [],\n      devices: [],\n      zones: [],\n      dialogVisible: false,\n      editorIface: '',\n      protocols: [\n        ['none', this.$t('Unmanaged')],\n        ['dhcp', this.$t('DHCP Client')],\n        ['static', this.$t('Static address')],\n        ['pppoe', 'PPPoE'],\n        ['pptp', 'PPtP'],\n        ['l2tp', 'L2TP'],\n        ['3g', '3G']\n      ]\n    }\n  },\n  components: {\n    NetworkBadge,\n    ProtoDhcp,\n    ProtoStatic,\n    ProtoPppoe,\n    ProtoPptp,\n    ProtoL2tp,\n    Proto3g,\n    Ifname\n  },\n  computed: {\n    dialogTitle() {\n      return `${this.$t('Configure')} \"${this.editorIface}\"`\n    }\n  },\n  timers: {\n    load: {time: 3000, autostart: true, immediate: true, repeat: true}\n  },\n  methods: {\n    load() {\n      this.$network.load().then(() => {\n        this.interfaces = this.$network.getInterfaces();\n      });\n    },\n    protoChanged(proto) {\n      this.proto = proto;\n    },\n    onProtoMounted(proto) {\n      this.virtual = proto.virtual;\n      this.floating = proto.floating;\n    },\n    saveType(sid, value) {\n      this.$uci.set('network', sid, 'type', value || '');\n    },\n    loadZone() {\n      return new Promise(resolve => {\n        this.$firewall.load().then(() => {\n          this.zones = this.$firewall.zones.map(z => z.name());\n          const z = this.$firewall.findZoneByNetwork(this.editorIface);\n          if (z)\n            resolve(z.name());\n          resolve();\n        });\n      });\n    },\n    saveZone(sid, value) {\n      let z = this.$firewall.findZoneByNetwork(this.editorIface);\n\n      if (!value) {\n        if (z)\n          z.delNetwork(this.editorIface);\n        return;\n      }\n\n      if (z) {\n        if (value === z.name())\n          return;\n        z.delNetwork(this.editorIface);\n      }\n\n      z = this.$firewall.findZoneByName(value);\n      if (!z)\n        z = this.$firewall.createZone(value);\n      z.addNetwork(this.editorIface);\n    },\n    edit(iface) {\n      this.editorIface = iface;\n      this.dialogVisible = true;\n    },\n    ifup(name) {\n      this.$ubus.call('oui.network', 'ifup', {name: name});\n    },\n    ifdown(name) {\n      this.$ubus.call('oui.network', 'ifdown', {name: name});\n    },\n    del(name) {\n      this.$confirm(this.$t('Really delete this interface? The deletion cannot be undone!You might lose access to this device if you are connected via this interface.'), `${this.$t('Delete interface')} \"${name}\"`).then(() => {\n        const loading = this.$getLoading();\n\n        this.$uci.del('network', name);\n        this.$uci.save().then(() => {\n          this.$uci.apply().then(() => {\n            this.load();\n            loading.close();\n          });\n        });\n      });\n    },\n    add(name) {\n      const loading = this.$getLoading();\n\n      this.$uci.add('network', 'interface', name);\n      this.$uci.save().then(() => {\n        this.$uci.apply().then(() => {\n          this.load();\n          loading.close();\n        });\n      });\n    },\n    handleAdd() {\n      this.$prompt(this.$t('Please input a name'), this.$t('Add'), {\n        inputValidator: value => {\n          if (!value || value.match(/^[a-zA-Z0-9_]+$/) === null)\n            return this.$t('Must be a valid UCI identifier');\n\n          for (let i = 0; i < this.interfaces.length; i++)\n            if (this.interfaces[i].name === value)\n              return this.$t('Name already used');\n\n          return true;\n        }\n      }).then(r => {\n        this.add(r.value);\n      });\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.interface-edit-dialog {\n  .el-dialog__header {\n    padding: 10px 20px 10px;\n  }\n  .el-dialog__body {\n    padding: 0;\n  }\n}\n</style>\n"],"sourceRoot":"src/views/network/interfaces"}]}