{"remainingRequest":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\system\\users.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\system\\users.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\sass-loader\\lib\\loader.js","mtime":1533139052000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.oui-acls-table {\n  .el-radio__label {\n    display: none;\n  }\n}\n",{"version":3,"sources":["users.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwQA;AACA;AACA;AACA;AACA","file":"users.vue","sourceRoot":"src/views/system","sourcesContent":["<template>\n  <uci-form config=\"rpcd\" @applied=\"onApplied\">\n    <uci-section type=\"login\" addable :teasers=\"['username', 'shadow']\" :add=\"addUser\">\n      <uci-option-dummy :label=\"$t('Username')\" name=\"username\"></uci-option-dummy>\n      <uci-option-switch :label=\"$t('Use the Linux system user password')\" name=\"shadow\" :load=\"isShadow\" @change=\"shadowChanged\" :save=\"saveShadow\"></uci-option-switch>\n      <uci-option-input :label=\"$t('Password')\" name=\"password\" depend=\"!shadow\" required password :description=\"$t('acl-password-description')\" :save=\"savePasswd\"></uci-option-input>\n      <uci-option :label=\"$t('User ACLs')\" name=\"acls\" :load=\"loadAcls\" :save=\"saveAcls\" :description=\"$t('acl-acl-description')\">\n        <template v-slot=\"{value}\">\n          <el-table :data=\"value || []\" class=\"oui-acls-table\">\n            <el-table-column :label=\"$t('ACL Group')\" prop=\"description\"></el-table-column>\n            <el-table-column :label=\"$t('N')\" width=\"30\">\n              <template v-slot=\"{row}\">\n                <el-radio v-model=\"row.acl\" label=\"n\"></el-radio>\n              </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('R')\" width=\"30\">\n              <template v-slot=\"{row}\">\n                <el-radio v-model=\"row.acl\" label=\"r\"></el-radio>\n              </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('F')\" width=\"30\">\n              <template v-slot=\"{row}\">\n                <el-radio v-model=\"row.acl\" label=\"f\"></el-radio>\n              </template>\n            </el-table-column>\n          </el-table>\n        </template>\n      </uci-option>\n    </uci-section>\n  </uci-form>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      groups: null\n    }\n  },\n  methods: {\n    cryptPassword(data) {\n      return this.$ubus.call('oui.ui', 'crypt', {data});\n    },\n    callACLs() {\n      return this.$ubus.call('oui.ui', 'acls');\n    },\n    isShadow(sid) {\n      let r = false;\n      const pw = this.$uci.get('rpcd', sid, 'password');\n      if (pw && pw.indexOf('$p$') === 0)\n        r = true;\n      return r;\n    },\n    shadowChanged(v, sid, self) {\n      const s = self.uciSection;\n      const pw = s.formValue('password', sid);\n\n      if (!v && pw && pw.indexOf('$p$') === 0)\n        s.setFormValue('password', sid, '');\n    },\n    doSavePasswd(s, sid) {\n      const username = s.formValue('username', sid);\n      const sh = s.formValue('shadow', sid);\n      let pw = s.formValue('password', sid);\n\n      if (sh)\n        pw = '$p$' + username;\n\n      if (pw.match(/^\\$[0-9p][a-z]?\\$/)) {\n        if (pw !== this.$uci.get('rpcd', sid, 'password'))\n          this.$uci.set('rpcd', sid, 'password', pw);\n      } else {\n        return new Promise(resolve => {\n          this.cryptPassword(pw).then(({crypt}) => {\n            if (crypt !== this.$uci.get('rpcd', sid, 'password'))\n              this.$uci.set('rpcd', sid, 'password', crypt);\n            resolve();\n          });\n        });\n      }\n    },\n    saveShadow(sid, value, self) {\n      return this.doSavePasswd(self.uciSection, sid);\n    },\n    savePasswd(sid, value, self) {\n      return this.doSavePasswd(self.uciSection, sid);\n    },\n    addUser(self) {\n      return new Promise(resolve => {\n        this.$prompt(this.$t('Please input a username'), this.$t('Add'), {\n          inputValidator: value => {\n            if (!value)\n              return true;\n\n            const sections = self.sections;\n            for (let i = 0; i < sections.length; i++)\n              if (sections[i].username === value)\n                return this.$t('Username already used');\n\n            return true;\n          }\n        }).then(r => {\n          if (!r.value)\n            return;\n\n          const sid = this.$uci.add('rpcd', 'login');\n          this.$uci.set('rpcd', sid, 'username', r.value);\n          resolve(sid);\n        });\n      });\n    },\n    mergeACLScope(aclScope, scope) {\n      if (Array.isArray(scope)) {\n        scope.forEach(name => {\n          aclScope[name] = true;\n        });\n      } else {\n        for (const name in scope) {\n          if (!Array.isArray(scope[name]))\n            continue;\n          const aclObject = aclScope[name] || (aclScope[name] = {});\n          scope[name].forEach(s => {\n            aclObject[s] = true;\n          });\n        }\n      }\n    },\n    mergeACLPermission(aclPerm, perm) {\n      for (const name in perm) {\n        const aclScope = aclPerm[name] || (aclPerm[name] = {});\n        this.mergeACLScope(aclScope, perm[name]);\n      }\n    },\n    mergeACLGroup(aclAroup, group) {\n      if (!aclAroup.description)\n        aclAroup.description = group.description;\n\n      if (group.read) {\n        const aclPerm = aclAroup.read || (aclAroup.read = {});\n        this.mergeACLPermission(aclPerm, group.read);\n      }\n\n      if (group.write) {\n        const aclPerm = aclAroup.write || (aclAroup.write = {});\n        this.mergeACLPermission(aclPerm, group.write);\n      }\n    },\n    aclMatch(list, group) {\n      if (list.indexOf('!' + group) > -1)\n        return false;\n\n      if (list.indexOf(group) > -1)\n        return true;\n\n      if (list[0] === '*')\n        return true;\n    },\n    loadGroups() {\n      return new Promise(resolve => {\n        if (this.groups) {\n          resolve();\n          return;\n        }\n\n        this.callACLs().then(r => {\n          const acls = {};\n\n          r.acls.forEach(tree => {\n            for (const name in tree) {\n              const aclAroup = acls[name] || (acls[name] = {});\n              this.mergeACLGroup(aclAroup, tree[name]);\n            }\n          });\n\n          const groups = [];\n\n          for (const groupName in acls) {\n            if (groupName === 'unauthenticated')\n              continue;\n            groups.push({\n              description: this.$t(acls[groupName].description),\n              name: groupName\n            });\n          }\n\n          this.groups = groups;\n          resolve();\n        });\n      });\n    },\n    loadAcls(sid) {\n      return new Promise(resolve => {\n        this.loadGroups().then(() => {\n          const readList = this.$uci.get('rpcd', sid, 'read') || [];\n          const writeList = this.$uci.get('rpcd', sid, 'write') || [];\n          const groups = [];\n\n          this.groups.forEach(g => {\n            const r = this.aclMatch(readList, g.name);\n            const w = this.aclMatch(writeList, g.name);\n\n            groups.push({\n              acl: w ? 'f' : (r ? 'r' : 'n'),\n              ...g\n            });\n          });\n\n          resolve(groups);\n        });\n      });\n    },\n    aclToUCI(list) {\n      if (list.length < this.groups.length / 2)\n        return list;\n\n      const set = {};\n      list.forEach(v => {\n        set[v] = true;\n      });\n\n      const rv = ['*'];\n\n      this.groups.forEach(g => {\n        if (!set[g.name])\n          rv.push('!' + g.name);\n      });\n\n      return rv;\n    },\n    saveAcls(sid, value) {\n      let readList = [];\n      let writeList = [];\n\n      value.forEach(group => {\n        const name = group.name;\n        const acl = group.acl;\n        if (acl === 'f') {\n          readList.push(name);\n          writeList.push(name);\n        } else if (acl === 'r') {\n          readList.push(name);\n        }\n      });\n\n      readList = this.aclToUCI(readList);\n      writeList = this.aclToUCI(writeList);\n\n      const originalReadList = this.$uci.get('rpcd', sid, 'read') || [];\n      const originalWriteList = this.$uci.get('rpcd', sid, 'write') || [];\n\n      if (!window.oui.isEqual(readList, originalReadList))\n        this.$uci.set('rpcd', sid, 'read', this.aclToUCI(readList));\n\n      if (!window.oui.isEqual(writeList, originalWriteList))\n        this.$uci.set('rpcd', sid, 'write', this.aclToUCI(writeList));\n    },\n    onApplied() {\n      this.$session.updateACLs();\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.oui-acls-table {\n  .el-radio__label {\n    display: none;\n  }\n}\n</style>\n"]}]}