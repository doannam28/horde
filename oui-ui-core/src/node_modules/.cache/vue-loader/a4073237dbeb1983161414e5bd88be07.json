{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\interfaces\\ifname.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\interfaces\\ifname.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nexport default {\n  props: {\n    multiple: Boolean\n  },\n  data() {\n    return {\n      devices: []\n    }\n  },\n  computed: {\n    name() {\n      if (this.multiple)\n        return 'ifname_multi';\n      else\n        return 'ifname_single';\n    },\n    depend() {\n      if (this.multiple)\n        return 'type';\n      else\n        return '!type';\n    }\n  },\n  methods: {\n    load(sid, self) {\n      if (this.multiple)\n        return self.getUciValue(sid);\n\n      const ifname = this.$uci.get('network', sid, 'ifname') || '';\n      return ifname.split(' ')[0];\n    }\n  },\n  created() {\n    this.$network.load().then(() => {\n      this.devices = this.$network.getDevices().map(d => d.name);\n    });\n  }\n}\n",{"version":3,"sources":["ifname.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ifname.vue","sourceRoot":"src/views/network/interfaces","sourcesContent":["<template>\n  <uci-option-list :label=\"$t('Interface')\" :name=\"name\" uci-option=\"ifname\" :load=\"load\" :options=\"devices\" :depend=\"depend\" :multiple=\"multiple\"></uci-option-list>\n</template>\n\n<script>\nexport default {\n  props: {\n    multiple: Boolean\n  },\n  data() {\n    return {\n      devices: []\n    }\n  },\n  computed: {\n    name() {\n      if (this.multiple)\n        return 'ifname_multi';\n      else\n        return 'ifname_single';\n    },\n    depend() {\n      if (this.multiple)\n        return 'type';\n      else\n        return '!type';\n    }\n  },\n  methods: {\n    load(sid, self) {\n      if (this.multiple)\n        return self.getUciValue(sid);\n\n      const ifname = this.$uci.get('network', sid, 'ifname') || '';\n      return ifname.split(' ')[0];\n    }\n  },\n  created() {\n    this.$network.load().then(() => {\n      this.devices = this.$network.getDevices().map(d => d.name);\n    });\n  }\n}\n</script>\n"]}]}