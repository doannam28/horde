{"remainingRequest":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\wireless.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\wireless.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data() {\n    return {\n      radios: [],\n      modes: [\n        ['ap', this.$t('Access Point')],\n        ['sta', this.$t('Client')],\n        ['adhoc', this.$t('Ad-Hoc')]\n      ],\n      interfaces: [],\n      encryptions: [\n        ['none', this.$t('No encryption')],\n        ['psk', 'WPA-PSK'],\n        ['psk2', 'WPA2-PSK'],\n        ['psk-mixed', 'WPA/WPA2-PSK ' + this.$t('mixed')]\n      ],\n      ciphers: [\n        ['auto', this.$t('auto')],\n        ['ccmp', this.$t('Force CCMP (AES)')],\n        ['tkip', this.$t('Force TKIP')],\n        ['tkip+ccmp', this.$t('Force TKIP and CCMP (AES)')]\n      ],\n      macfilters: [\n        ['allow', this.$t('Allow listed only')],\n        ['deny', this.$t('Allow all except listed')]\n      ]\n    }\n  },\n  methods: {\n    filterInterface(s, self) {\n      return self.options.radio === s.device;\n    },\n    afterAddIface(sid, self) {\n      this.$uci.set('wireless', sid, 'device', self.options.radio);\n    },\n    loadEncr(sid) {\n      const [v] = (this.$uci.get('wireless', sid, 'encryption') || '').split('+');\n      return v;\n    },\n    loadCipher(sid) {\n      let v = (this.$uci.get('wireless', sid, 'encryption') || '').split('+');\n\n      if (v.length < 2)\n        return 'auto';\n\n      v = v.slice(1).join('+');\n\n      if (v === 'aes')\n        v = 'ccmp';\n      else if (v === 'tkip+aes' || v === 'aes+tkip' || v === 'ccmp+tkip')\n        v = 'tkip+ccmp';\n\n      return v;\n    },\n    saveEncr(sid, value, self) {\n      let cipher = self.uciSection.formValue('cipher', sid);\n\n      if (cipher === 'tkip' || cipher === 'ccmp' || cipher === 'tkip+ccmp')\n        value = `${value}+${cipher}`;\n\n      this.$uci.set('wireless', sid, 'encryption', value);\n    },\n    saveCipher(sid, value, self) {\n      let encr = self.uciSection.formValue('encryption', sid);\n\n      if (value === 'tkip' || value === 'ccmp' || value === 'tkip+ccmp')\n        encr = `${encr}+${value}`;\n\n      this.$uci.set('wireless', sid, 'encryption', encr);\n    }\n  },\n  created() {\n    const loading = this.$getLoading();\n\n    this.$uci.load('wireless').then(() => {\n      const sections = this.$uci.sections('wireless', 'wifi-device');\n      let radios_num = sections.length;\n\n      sections.forEach(s => {\n        const device = s['.name'];\n        const batch = [];\n\n        batch.push(['iwinfo', 'info', {device}]);\n        batch.push(['iwinfo', 'freqlist', {device}]);\n        batch.push(['iwinfo', 'txpowerlist', {device}]);\n        batch.push(['iwinfo', 'countrylist', {device}]);\n\n        this.$ubus.callBatch(batch).then(rs => {\n          const channels = [['auto', this.$t('Automatic')]];\n          const info = rs[0];\n          const freqlist = rs[1].results\n          const txpowerlist = [];\n          const countrylist = [];\n\n          freqlist.forEach(f => {\n            if (f.restricted)\n              return;\n            channels.push([f.channel, `${f.channel} (${f.mhz} MHz)`]);\n          });\n\n          rs[2].results.forEach(tx => {\n            txpowerlist.push([tx.dbm, `${tx.dbm} dBm (${tx.mw} mW)`]);\n          });\n\n          rs[3].results.forEach(c => {\n            countrylist.push([c.code, `${c.code} - ${c.country}`]);\n          });\n\n          const hwmodes = ['11g'];\n\n          if (info.hwmodes.indexOf('a') > -1 || info.hwmodes.indexOf('ac') > -1)\n            hwmodes.push('11a');\n\n          this.radios.push({\n            name: device,\n            channel: info.channel,\n            txpower: info.txpower,\n            country: info.country,\n            hardware: info.hardware.name,\n            hwmodes: hwmodes,\n            htmodes: info.htmodes,\n            channels: channels,\n            txpowerlist: txpowerlist,\n            countrylist: countrylist\n          });\n\n          radios_num--;\n\n          if (radios_num === 0)\n            loading.close();\n        });\n      });\n    });\n\n    this.$network.load().then(() => {\n      const interfaces = this.$network.getInterfaces();\n      this.interfaces = interfaces.map(item => item.name);\n    });\n  }\n}\n",{"version":3,"sources":["wireless.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"wireless.vue","sourceRoot":"src/views/network","sourcesContent":["<template>\n  <el-tabs v-if=\"radios.length > 0\" :value=\"radios[0].name\">\n    <el-tab-pane v-for=\"radio in radios\" :key=\"radio.name\" :name=\"radio.name\" :label=\"radio.name + ` (${radio.hardware})`\">\n      <uci-form config=\"wireless\" :apply-timeout=\"15\">\n        <uci-section :name=\"radio.name\">\n          <uci-tab :title=\"$t('General Settings')\" name=\"general\">\n            <uci-option-switch :label=\"$t('Disabled')\" name=\"disabled\"></uci-option-switch>\n            <uci-option-list :label=\"$t('Mode')\" name=\"hwmode\" :options=\"radio.hwmodes\" required></uci-option-list>\n            <uci-option-list :label=\"$t('Band')\" name=\"htmode\" :options=\"radio.htmodes\"></uci-option-list>\n            <uci-option-list :label=\"$t('Channel')\" name=\"channel\" :options=\"radio.channels\" :initial=\"radio.channel\" required></uci-option-list>\n            <uci-option-list :label=\"$t('Transmit Power')\" name=\"txpower\" :options=\"radio.txpowerlist\" :initial=\"radio.txpower\" required></uci-option-list>\n          </uci-tab>\n          <uci-tab :title=\"$t('Advanced Settings')\" name=\"advanced\">\n            <uci-option-list :label=\"$t('Country Code')\" name=\"country\" :options=\"radio.countrylist\" :initial=\"radio.country\" required></uci-option-list>\n            <uci-option-input :label=\"$t('Distance Optimization')\" name=\"distance\" rules=\"uinteger\"></uci-option-input>\n          </uci-tab>\n        </uci-section>\n        <uci-section :title=\"$t('Interface')\" type=\"wifi-iface\" :options=\"{radio: radio.name}\" :filter=\"filterInterface\" addable :after-add=\"afterAddIface\">\n          <uci-tab :title=\"$t('General Settings')\" name=\"general\">\n            <uci-option-switch :label=\"$t('Disabled')\" name=\"disabled\"></uci-option-switch>\n            <uci-option-list :label=\"$t('Mode')\" name=\"mode\" required :options=\"modes\"></uci-option-list>\n            <uci-option-input label=\"SSID\" name=\"ssid\" required></uci-option-input>\n            <uci-option-list :label=\"$t('Network')\" name=\"network\" :options=\"interfaces\"></uci-option-list>\n            <uci-option-switch :label=\"$t('Hide ESSID')\" name=\"hidden\" depend=\"mode == 'ap'\"></uci-option-switch>\n            <uci-option-switch :label=\"$t('WMM Mode')\" name=\"wmm\" depend=\"mode == 'ap'\" initial=\"1\"></uci-option-switch>\n          </uci-tab>\n          <uci-tab :title=\"$t('Wireless Security')\" name=\"security\">\n            <uci-option-list :label=\"$t('Encryption')\" name=\"encryption\" :options=\"encryptions\" initial=\"none\" :load=\"loadEncr\" :save=\"saveEncr\"></uci-option-list>\n            <uci-option-list :label=\"$t('Cipher')\" name=\"cipher\" depend=\"encryption != 'none'\" :options=\"ciphers\" initial=\"auto\" :load=\"loadCipher\" :save=\"saveCipher\"></uci-option-list>\n            <uci-option-input :label=\"$t('Passphrase')\" name=\"key\" depend=\"encryption != 'none'\" password></uci-option-input>\n          </uci-tab>\n          <uci-tab :title=\"$t('MAC-Filter')\" name=\"macfilter\">\n            <uci-option-list :label=\"$t('Mode')\" name=\"macfilter\" :options=\"macfilters\" depend=\"mode == 'ap'\"></uci-option-list>\n            <uci-option-dlist :label=\"$t('MAC-List')\" name=\"maclist\" depend=\"macfilter == 'allow' || macfilter == 'deny'\" rules=\"macaddr\"></uci-option-dlist>\n          </uci-tab>\n        </uci-section>\n      </uci-form>\n    </el-tab-pane>\n  </el-tabs>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      radios: [],\n      modes: [\n        ['ap', this.$t('Access Point')],\n        ['sta', this.$t('Client')],\n        ['adhoc', this.$t('Ad-Hoc')]\n      ],\n      interfaces: [],\n      encryptions: [\n        ['none', this.$t('No encryption')],\n        ['psk', 'WPA-PSK'],\n        ['psk2', 'WPA2-PSK'],\n        ['psk-mixed', 'WPA/WPA2-PSK ' + this.$t('mixed')]\n      ],\n      ciphers: [\n        ['auto', this.$t('auto')],\n        ['ccmp', this.$t('Force CCMP (AES)')],\n        ['tkip', this.$t('Force TKIP')],\n        ['tkip+ccmp', this.$t('Force TKIP and CCMP (AES)')]\n      ],\n      macfilters: [\n        ['allow', this.$t('Allow listed only')],\n        ['deny', this.$t('Allow all except listed')]\n      ]\n    }\n  },\n  methods: {\n    filterInterface(s, self) {\n      return self.options.radio === s.device;\n    },\n    afterAddIface(sid, self) {\n      this.$uci.set('wireless', sid, 'device', self.options.radio);\n    },\n    loadEncr(sid) {\n      const [v] = (this.$uci.get('wireless', sid, 'encryption') || '').split('+');\n      return v;\n    },\n    loadCipher(sid) {\n      let v = (this.$uci.get('wireless', sid, 'encryption') || '').split('+');\n\n      if (v.length < 2)\n        return 'auto';\n\n      v = v.slice(1).join('+');\n\n      if (v === 'aes')\n        v = 'ccmp';\n      else if (v === 'tkip+aes' || v === 'aes+tkip' || v === 'ccmp+tkip')\n        v = 'tkip+ccmp';\n\n      return v;\n    },\n    saveEncr(sid, value, self) {\n      let cipher = self.uciSection.formValue('cipher', sid);\n\n      if (cipher === 'tkip' || cipher === 'ccmp' || cipher === 'tkip+ccmp')\n        value = `${value}+${cipher}`;\n\n      this.$uci.set('wireless', sid, 'encryption', value);\n    },\n    saveCipher(sid, value, self) {\n      let encr = self.uciSection.formValue('encryption', sid);\n\n      if (value === 'tkip' || value === 'ccmp' || value === 'tkip+ccmp')\n        encr = `${encr}+${value}`;\n\n      this.$uci.set('wireless', sid, 'encryption', encr);\n    }\n  },\n  created() {\n    const loading = this.$getLoading();\n\n    this.$uci.load('wireless').then(() => {\n      const sections = this.$uci.sections('wireless', 'wifi-device');\n      let radios_num = sections.length;\n\n      sections.forEach(s => {\n        const device = s['.name'];\n        const batch = [];\n\n        batch.push(['iwinfo', 'info', {device}]);\n        batch.push(['iwinfo', 'freqlist', {device}]);\n        batch.push(['iwinfo', 'txpowerlist', {device}]);\n        batch.push(['iwinfo', 'countrylist', {device}]);\n\n        this.$ubus.callBatch(batch).then(rs => {\n          const channels = [['auto', this.$t('Automatic')]];\n          const info = rs[0];\n          const freqlist = rs[1].results\n          const txpowerlist = [];\n          const countrylist = [];\n\n          freqlist.forEach(f => {\n            if (f.restricted)\n              return;\n            channels.push([f.channel, `${f.channel} (${f.mhz} MHz)`]);\n          });\n\n          rs[2].results.forEach(tx => {\n            txpowerlist.push([tx.dbm, `${tx.dbm} dBm (${tx.mw} mW)`]);\n          });\n\n          rs[3].results.forEach(c => {\n            countrylist.push([c.code, `${c.code} - ${c.country}`]);\n          });\n\n          const hwmodes = ['11g'];\n\n          if (info.hwmodes.indexOf('a') > -1 || info.hwmodes.indexOf('ac') > -1)\n            hwmodes.push('11a');\n\n          this.radios.push({\n            name: device,\n            channel: info.channel,\n            txpower: info.txpower,\n            country: info.country,\n            hardware: info.hardware.name,\n            hwmodes: hwmodes,\n            htmodes: info.htmodes,\n            channels: channels,\n            txpowerlist: txpowerlist,\n            countrylist: countrylist\n          });\n\n          radios_num--;\n\n          if (radios_num === 0)\n            loading.close();\n        });\n      });\n    });\n\n    this.$network.load().then(() => {\n      const interfaces = this.$network.getInterfaces();\n      this.interfaces = interfaces.map(item => item.name);\n    });\n  }\n}\n</script>\n"]}]}