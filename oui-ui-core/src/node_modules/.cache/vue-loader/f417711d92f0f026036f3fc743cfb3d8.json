{"remainingRequest":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\system\\cron.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\system\\cron.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data() {\n    return {\n      data: [],\n      dialogVisible: false,\n      add: false,\n      edit: {\n        index: 0,\n        min: '',\n        hour: '',\n        day: '',\n        month: '',\n        week: '',\n        command: ''\n      },\n      rules: {\n        min: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        hour: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        day: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        month: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        week: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        command: [\n          {required: true, message: this.$t('This field is required')}\n        ]\n      }\n    }\n  },\n  methods: {\n    getCrontab() {\n      return new Promise(resolve => {\n        this.$ubus.call('oui.system', 'crontab_get').then(r => {\n          let index = 0;\n          const data = []\n\n          r.entries.forEach(item => {\n            data.push({\n              index: index++,\n              ...item\n            });\n          });\n          this.data = data;\n          resolve();\n        });\n      });\n    },\n    setCrontab(data) {\n      return this.$ubus.call('oui.system', 'crontab_set', {data});\n    },\n    showEdit(index) {\n      Object.assign(this.edit, this.data[index]);\n      this.dialogVisible = true;\n      this.add = false;\n      this.dialogTitle = 'Edit';\n    },\n    showAdd() {\n      this.dialogVisible = true;\n      this.add = true;\n      this.edit.min = '*';\n      this.edit.hour = '*';\n      this.edit.day = '*';\n      this.edit.month = '*';\n      this.edit.week = '*';\n      this.edit.command = '';\n      this.index = this.data.length;\n    },\n    handleDelete(index) {\n      const cron = this.data[index];\n      const content = this.$t('cron-del-confirm', {cron: `${cron.min} ${cron.hour} ${cron.day} ${cron.month} ${cron.week} ${cron.command}`});\n      this.$confirm(content, this.$t('Delete')).then(() => {\n        this.data.splice(index, 1);\n        this.apply().then(() => {\n          this.$message.success(this.$t('success'));\n        });\n      });\n    },\n    handleEdit() {\n      this.$refs['edit'].validate(valid => {\n        if (!valid)\n          return;\n\n        if (this.add)\n          this.data.push(this.edit);\n        else\n          Object.assign(this.data[this.edit.index], this.edit);\n\n        this.dialogVisible = false;\n        this.apply().then(() => {\n          this.$message.success(this.$t('success'));\n        });\n      });\n    },\n    apply() {\n      return new Promise(resolve => {\n        const crons = [];\n\n        this.data.forEach(item => {\n          const expr = `${item.min} ${item.hour} ${item.day} ${item.month} ${item.week} ${item.command}\\n`;\n          crons.push(expr);\n        });\n\n        this.setCrontab(crons.join('')).then(() => {\n          this.getCrontab().then(() => {\n            resolve();\n          });\n        });\n      });\n    }\n  },\n  created() {\n    this.getCrontab();\n  }\n}\n",{"version":3,"sources":["cron.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"cron.vue","sourceRoot":"src/views/system","sourcesContent":["<template>\n  <div>\n    <el-button type=\"primary\" size=\"mini\" style=\"margin-bottom: 10px\" @click=\"showAdd\">{{ $t('Add') }}</el-button>\n    <el-table :data=\"data\">\n      <el-table-column prop=\"min\" :label=\"$t('Minute')\" width=\"140\"></el-table-column>\n      <el-table-column prop=\"hour\" :label=\"$t('Hour')\" width=\"140\"></el-table-column>\n      <el-table-column prop=\"day\" :label=\"$t('Day')\" width=\"140\"></el-table-column>\n      <el-table-column prop=\"month\" :label=\"$t('Month')\" width=\"140\"></el-table-column>\n      <el-table-column prop=\"week\" :label=\"$t('Week')\" width=\"140\"></el-table-column>\n      <el-table-column prop=\"command\" :label=\"$t('Command')\"></el-table-column>\n      <el-table-column label=\"#\" width=\"200\">\n        <template v-slot=\"{$index}\">\n          <el-button type=\"primary\" size=\"mini\" @click=\"showEdit($index)\">{{ $t('Edit') }}</el-button>\n          <el-button type=\"danger\" size=\"mini\" @click=\"handleDelete($index)\">{{ $t('Delete') }}</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-dialog :visible.sync=\"dialogVisible\" :title=\"add ? $t('Add') : $t('Edit')\">\n      <el-form label-width=\"100px\" label-position=\"left\" :model=\"edit\" ref=\"edit\" :rules=\"rules\">\n        <el-form-item :label=\"$t('Minute')\" prop=\"min\">\n          <el-input v-model=\"edit.min\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('Hour')\" prop=\"hour\">\n          <el-input v-model=\"edit.hour\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('Day')\" prop=\"day\">\n          <el-input v-model=\"edit.day\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('Month')\" prop=\"month\">\n          <el-input v-model=\"edit.month\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('Week')\" prop=\"week\">\n          <el-input v-model=\"edit.week\"></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$t('Command')\" prop=\"command\">\n          <el-input v-model=\"edit.command\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogVisible = false\">{{ $t('Cancel') }}</el-button>\n        <el-button type=\"primary\" @click=\"handleEdit\">{{ $t('OK') }}</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: [],\n      dialogVisible: false,\n      add: false,\n      edit: {\n        index: 0,\n        min: '',\n        hour: '',\n        day: '',\n        month: '',\n        week: '',\n        command: ''\n      },\n      rules: {\n        min: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        hour: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        day: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        month: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        week: [\n          {required: true, message: this.$t('This field is required')}\n        ],\n        command: [\n          {required: true, message: this.$t('This field is required')}\n        ]\n      }\n    }\n  },\n  methods: {\n    getCrontab() {\n      return new Promise(resolve => {\n        this.$ubus.call('oui.system', 'crontab_get').then(r => {\n          let index = 0;\n          const data = []\n\n          r.entries.forEach(item => {\n            data.push({\n              index: index++,\n              ...item\n            });\n          });\n          this.data = data;\n          resolve();\n        });\n      });\n    },\n    setCrontab(data) {\n      return this.$ubus.call('oui.system', 'crontab_set', {data});\n    },\n    showEdit(index) {\n      Object.assign(this.edit, this.data[index]);\n      this.dialogVisible = true;\n      this.add = false;\n      this.dialogTitle = 'Edit';\n    },\n    showAdd() {\n      this.dialogVisible = true;\n      this.add = true;\n      this.edit.min = '*';\n      this.edit.hour = '*';\n      this.edit.day = '*';\n      this.edit.month = '*';\n      this.edit.week = '*';\n      this.edit.command = '';\n      this.index = this.data.length;\n    },\n    handleDelete(index) {\n      const cron = this.data[index];\n      const content = this.$t('cron-del-confirm', {cron: `${cron.min} ${cron.hour} ${cron.day} ${cron.month} ${cron.week} ${cron.command}`});\n      this.$confirm(content, this.$t('Delete')).then(() => {\n        this.data.splice(index, 1);\n        this.apply().then(() => {\n          this.$message.success(this.$t('success'));\n        });\n      });\n    },\n    handleEdit() {\n      this.$refs['edit'].validate(valid => {\n        if (!valid)\n          return;\n\n        if (this.add)\n          this.data.push(this.edit);\n        else\n          Object.assign(this.data[this.edit.index], this.edit);\n\n        this.dialogVisible = false;\n        this.apply().then(() => {\n          this.$message.success(this.$t('success'));\n        });\n      });\n    },\n    apply() {\n      return new Promise(resolve => {\n        const crons = [];\n\n        this.data.forEach(item => {\n          const expr = `${item.min} ${item.hour} ${item.day} ${item.month} ${item.week} ${item.command}\\n`;\n          crons.push(expr);\n        });\n\n        this.setCrontab(crons.join('')).then(() => {\n          this.getCrontab().then(() => {\n            resolve();\n          });\n        });\n      });\n    }\n  },\n  created() {\n    this.getCrontab();\n  }\n}\n</script>\n"]}]}