{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\interfaces\\index.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\interfaces\\index.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\sass-loader\\lib\\loader.js","mtime":1533139052000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.interface-edit-dialog {\n  .el-dialog__header {\n    padding: 10px 20px 10px;\n  }\n  .el-dialog__body {\n    padding: 0;\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/network/interfaces","sourcesContent":["<template>\n  <div>\n    <el-table :data=\"interfaces\">\n      <el-table-column :label=\"$t('Network')\" width=\"140\">\n        <template v-slot=\"{ row }\">\n          <network-badge :iface=\"row.name\" :device=\"row.getDevice() && row.getDevice().name\"></network-badge>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('Status')\">\n        <template v-slot=\"{ row }\">\n          <strong>{{ $t('Uptime') }}</strong>: {{ row.isUp() ? '%t'.format(row.getUptime()) : $t('Interface is down') }}<br/>\n          <strong>MAC</strong>: {{ row.getDevice() ? row.getDevice().macaddr : '' }}<br/>\n          <strong>RX</strong>: {{ '%mB'.format(row.getStatistics().rx_bytes) }}<br/>\n          <strong>TX</strong>: {{ '%mB'.format(row.getStatistics().tx_bytes) }}<br/>\n          <strong>IPv4</strong>: {{ row.getIPv4Addrs().join(',') }}<br/>\n          <strong>IPv6</strong>: {{ row.getIPv6Addrs().join(',') }}<br/>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"#\">\n        <template v-slot=\"{ row }\">\n          <el-button size=\"mini\" @click=\"ifup(row.name)\">{{ $t('Start') }}</el-button>\n          <el-button size=\"mini\" @click=\"ifdown(row.name)\">{{ $t('Stop') }}</el-button>\n          <el-button type=\"primary\" size=\"mini\" @click=\"edit(row.name)\">{{ $t('Edit') }}</el-button>\n          <el-button type=\"danger\" size=\"mini\" @click=\"del(row.name)\">{{ $t('Delete') }}</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-button type=\"primary\" size=\"small\" style=\"margin-top: 10px\" @click=\"handleAdd\">+ {{ $t('Add interface') }}</el-button>\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" custom-class=\"interface-edit-dialog\">\n      <uci-form config=\"network\" v-if=\"dialogVisible\" :apply-timeout=\"15\">\n        <uci-section :name=\"editorIface\">\n          <uci-tab :title=\"$t('General Settings')\" name=\"general\">\n            <uci-option-switch :label=\"$t('Start on boot')\" name=\"auto\" initial=\"1\"></uci-option-switch>\n            <uci-option-list :label=\"$t('Protocol')\" name=\"proto\" :options=\"protocols\" initial=\"none\" required @change=\"protoChanged\"></uci-option-list>\n          </uci-tab>\n          <uci-tab :title=\"$t('Advanced Settings')\" name=\"advanced\">\n            <uci-option-switch :label=\"$t('Use builtin IPv6-management')\" name=\"delegate\" initial=\"1\"></uci-option-switch>\n            <uci-option-switch :label=\"$t('Force link')\" name=\"force_link\" :initial=\"proto === 'static' ? true : false\" :description=\"$t('Set interface properties regardless of the link carrier (If set, carrier sense events do not invoke hotplug handlers).')\"></uci-option-switch>\n          </uci-tab>\n          <uci-tab :title=\"$t('Physical Settings')\" name=\"physical\">\n            <template v-if=\"!virtual\">\n              <uci-option-switch :label=\"$t('Bridge interfaces')\" name=\"type\" active-value=\"bridge\" :save=\"saveType\" depend=\"proto == 'static' || proto == 'dhcp' || proto == 'none'\" :description=\"$t('creates a bridge over specified interface(s)')\"></uci-option-switch>\n              <uci-option-switch :label=\"$t('Enable STP')\" name=\"stp\" depend=\"type\" :description=\"$t('Enables the Spanning Tree Protocol on this bridge')\"></uci-option-switch>\n              <uci-option-switch :label=\"$t('Enable IGMP')\" name=\"igmp_snooping\" depend=\"type\" :description=\"$t('Enables IGMP snooping on this bridge')\"></uci-option-switch>\n            </template>\n            <ifname v-if=\"!floating\"></ifname>\n            <ifname v-if=\"!virtual\" multiple></ifname>\n          </uci-tab>\n          <uci-tab :title=\"$t('Firewall Settings')\" name=\"firewall\">\n            <uci-option-list :label=\"$t('Create / Assign firewall-zone')\" name=\"_fwzone\" :options=\"zones\" :load=\"loadZone\" :save=\"saveZone\" allow-create :description=\"$t('interface-config-zone-desc')\"></uci-option-list>\n          </uci-tab>\n          <component v-if=\"proto !== '' && proto !== 'none'\" :is=\"'proto-' + proto\" @mounted=\"onProtoMounted\"></component>\n        </uci-section>\n      </uci-form>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport NetworkBadge from './network-badge.vue'\nimport ProtoDhcp from './proto/dhcp.vue'\nimport ProtoStatic from './proto/static.vue'\nimport ProtoPppoe from './proto/pppoe.vue'\nimport ProtoPptp from './proto/pptp.vue'\nimport ProtoL2tp from './proto/l2tp.vue'\nimport Proto3g from './proto/3g.vue'\nimport Ifname from './ifname.vue'\n\nexport default {\n  data() {\n    return {\n      proto: '',\n      virtual: false,\n      floating: false,\n      interfaces: [],\n      devices: [],\n      zones: [],\n      dialogVisible: false,\n      editorIface: '',\n      protocols: [\n        ['none', this.$t('Unmanaged')],\n        ['dhcp', this.$t('DHCP Client')],\n        ['static', this.$t('Static address')],\n        ['pppoe', 'PPPoE'],\n        ['pptp', 'PPtP'],\n        ['l2tp', 'L2TP'],\n        ['3g', '3G']\n      ]\n    }\n  },\n  components: {\n    NetworkBadge,\n    ProtoDhcp,\n    ProtoStatic,\n    ProtoPppoe,\n    ProtoPptp,\n    ProtoL2tp,\n    Proto3g,\n    Ifname\n  },\n  computed: {\n    dialogTitle() {\n      return `${this.$t('Configure')} \"${this.editorIface}\"`\n    }\n  },\n  timers: {\n    load: {time: 3000, autostart: true, immediate: true, repeat: true}\n  },\n  methods: {\n    load() {\n      this.$network.load().then(() => {\n        this.interfaces = this.$network.getInterfaces();\n      });\n    },\n    protoChanged(proto) {\n      this.proto = proto;\n    },\n    onProtoMounted(proto) {\n      this.virtual = proto.virtual;\n      this.floating = proto.floating;\n    },\n    saveType(sid, value) {\n      this.$uci.set('network', sid, 'type', value || '');\n    },\n    loadZone() {\n      return new Promise(resolve => {\n        this.$firewall.load().then(() => {\n          this.zones = this.$firewall.zones.map(z => z.name());\n          const z = this.$firewall.findZoneByNetwork(this.editorIface);\n          if (z)\n            resolve(z.name());\n          resolve();\n        });\n      });\n    },\n    saveZone(sid, value) {\n      let z = this.$firewall.findZoneByNetwork(this.editorIface);\n\n      if (!value) {\n        if (z)\n          z.delNetwork(this.editorIface);\n        return;\n      }\n\n      if (z) {\n        if (value === z.name())\n          return;\n        z.delNetwork(this.editorIface);\n      }\n\n      z = this.$firewall.findZoneByName(value);\n      if (!z)\n        z = this.$firewall.createZone(value);\n      z.addNetwork(this.editorIface);\n    },\n    edit(iface) {\n      this.editorIface = iface;\n      this.dialogVisible = true;\n    },\n    ifup(name) {\n      this.$ubus.call('oui.network', 'ifup', {name: name});\n    },\n    ifdown(name) {\n      this.$ubus.call('oui.network', 'ifdown', {name: name});\n    },\n    del(name) {\n      this.$confirm(this.$t('Really delete this interface? The deletion cannot be undone!You might lose access to this device if you are connected via this interface.'), `${this.$t('Delete interface')} \"${name}\"`).then(() => {\n        const loading = this.$getLoading();\n\n        this.$uci.del('network', name);\n        this.$uci.save().then(() => {\n          this.$uci.apply().then(() => {\n            this.load();\n            loading.close();\n          });\n        });\n      });\n    },\n    add(name) {\n      const loading = this.$getLoading();\n\n      this.$uci.add('network', 'interface', name);\n      this.$uci.save().then(() => {\n        this.$uci.apply().then(() => {\n          this.load();\n          loading.close();\n        });\n      });\n    },\n    handleAdd() {\n      this.$prompt(this.$t('Please input a name'), this.$t('Add'), {\n        inputValidator: value => {\n          if (!value || value.match(/^[a-zA-Z0-9_]+$/) === null)\n            return this.$t('Must be a valid UCI identifier');\n\n          for (let i = 0; i < this.interfaces.length; i++)\n            if (this.interfaces[i].name === value)\n              return this.$t('Name already used');\n\n          return true;\n        }\n      }).then(r => {\n        this.add(r.value);\n      });\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.interface-edit-dialog {\n  .el-dialog__header {\n    padding: 10px 20px 10px;\n  }\n  .el-dialog__body {\n    padding: 0;\n  }\n}\n</style>\n"]}]}