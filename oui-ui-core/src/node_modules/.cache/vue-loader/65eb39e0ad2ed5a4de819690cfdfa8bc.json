{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\system\\system\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\system\\system\\index.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport zoneinfo from './zoneinfo'\n\nexport default {\n  data() {\n    return {\n      localTime: '',\n      logProtos: [\n        ['udp', 'UDP'],\n        ['tcp', 'TCP']\n      ],\n      conlogLevels: [\n        ['8', this.$t('Debug')],\n        ['7', this.$t('Info')],\n        ['6', this.$t('Notice')],\n        ['5', this.$t('Warning')],\n        ['4', this.$t('Error')],\n        ['3', this.$t('Critical')],\n        ['2', this.$t('Alert')],\n        ['1', this.$t('Emergency')]\n      ],\n      cronlogLevels: [\n        ['5', this.$t('Debug')],\n        ['8', this.$t('Normal')],\n        ['9', this.$t('Warning')]\n      ]\n    }\n  },\n  computed: {\n    zoneinfo() {\n      return zoneinfo.map(item => item[0]);\n    }\n  },\n  timers: {\n    loadLocalTime: {time: 3000, autostart: true, immediate: true, repeat: true}\n  },\n  methods: {\n    loadLocalTime() {\n      this.$system.getSystemInfo().then(r => {\n        this.localTime = new Date(r.localtime * 1000).toString();\n      });\n    },\n    saveTimezone(sid, value) {\n      let timezone = 'UTC';\n\n      for (let i = 0; i < zoneinfo.length; i++) {\n        if (zoneinfo[i][0] === value) {\n          timezone = zoneinfo[i][1];\n          break;\n        }\n      }\n\n      this.$uci.set('system', sid, 'zonename', value);\n      this.$uci.set('system', sid, 'timezone', timezone);\n    },\n    ntpCliEnabled() {\n      return this.$system.initEnabled('sysntpd');\n    },\n    ntpCliEnableApply(v) {\n      return new Promise(resolve => {\n        if (v) {\n          this.$system.initStart('sysntpd').then(() => {\n            this.$system.initEnable('sysntpd').then(() => {\n              resolve();\n            });\n          });\n        } else {\n          this.$system.initStop('sysntpd').then(() => {\n            this.$system.initDisable('sysntpd').then(() => {\n              resolve();\n            });\n          });\n        }\n      });\n    },\n    updateHostname(value) {\n      this.$store.commit('setHostname', value);\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/system/system","sourcesContent":["<template>\n  <uci-form config=\"system\" tabbed>\n    <uci-section :title=\"$t('General Settings')\" type=\"system\">\n        <uci-option-dummy :label=\"$t('Local Time')\" :load=\"localTime\" name=\"__time\"></uci-option-dummy>\n        <uci-option-input type=\"input\" :label=\"$t('Hostname')\" name=\"hostname\" required rules=\"hostname\" @applied=\"updateHostname\"></uci-option-input>\n        <uci-option-list :label=\"$t('Timezone')\" name=\"zonename\" required initial=\"UTC\" :options=\"zoneinfo\" :save=\"saveTimezone\"></uci-option-list>\n    </uci-section>\n    <uci-section :title=\"$t('Logging')\" type=\"system\">\n      <uci-option-input :label=\"$t('System log buffer size')\" name=\"log_size\" placeholder=\"16\" append=\"kiB\" :rules=\"{type: 'uinteger', min: 0, max: 128}\"></uci-option-input>\n      <uci-option-input :label=\"$t('External system log server')\" name=\"log_ip\" placeholder=\"0.0.0.0\" rules=\"ip4addr\"></uci-option-input>\n      <uci-option-input :label=\"$t('External system log server port')\" name=\"log_port\" placeholder=\"514\" rules=\"port\"></uci-option-input>\n      <uci-option-list :label=\"$t('External system log server protocol')\" name=\"log_proto\" initial=\"udp\" :options=\"logProtos\" required></uci-option-list>\n      <uci-option-file :label=\"$t('Write system log to file')\" name=\"log_file\"></uci-option-file>\n      <uci-option-list :label=\"$t('Log output level')\" name=\"conloglevel\" initial=\"7\" :options=\"conlogLevels\" required></uci-option-list>\n      <uci-option-list :label=\"$t('Cron Log Level')\" name=\"cronloglevel\" initial=\"5\" :options=\"cronlogLevels\" required></uci-option-list>\n    </uci-section>\n    <uci-section :title=\"$t('Time Synchronization')\" name=\"ntp\">\n      <uci-option-switch :label=\"$t('Enable NTP client')\" name=\"enable\" save=\"\" :load=\"ntpCliEnabled\" :apply=\"ntpCliEnableApply\"></uci-option-switch>\n      <uci-option-switch :label=\"$t('Provide NTP server')\" name=\"enable_server\" depend=\"enable\"></uci-option-switch>\n      <uci-option-dlist :label=\"$t('NTP server candidates')\" name=\"server\" depend=\"enable\"></uci-option-dlist>\n    </uci-section>\n  </uci-form>\n</template>\n\n<script>\nimport zoneinfo from './zoneinfo'\n\nexport default {\n  data() {\n    return {\n      localTime: '',\n      logProtos: [\n        ['udp', 'UDP'],\n        ['tcp', 'TCP']\n      ],\n      conlogLevels: [\n        ['8', this.$t('Debug')],\n        ['7', this.$t('Info')],\n        ['6', this.$t('Notice')],\n        ['5', this.$t('Warning')],\n        ['4', this.$t('Error')],\n        ['3', this.$t('Critical')],\n        ['2', this.$t('Alert')],\n        ['1', this.$t('Emergency')]\n      ],\n      cronlogLevels: [\n        ['5', this.$t('Debug')],\n        ['8', this.$t('Normal')],\n        ['9', this.$t('Warning')]\n      ]\n    }\n  },\n  computed: {\n    zoneinfo() {\n      return zoneinfo.map(item => item[0]);\n    }\n  },\n  timers: {\n    loadLocalTime: {time: 3000, autostart: true, immediate: true, repeat: true}\n  },\n  methods: {\n    loadLocalTime() {\n      this.$system.getSystemInfo().then(r => {\n        this.localTime = new Date(r.localtime * 1000).toString();\n      });\n    },\n    saveTimezone(sid, value) {\n      let timezone = 'UTC';\n\n      for (let i = 0; i < zoneinfo.length; i++) {\n        if (zoneinfo[i][0] === value) {\n          timezone = zoneinfo[i][1];\n          break;\n        }\n      }\n\n      this.$uci.set('system', sid, 'zonename', value);\n      this.$uci.set('system', sid, 'timezone', timezone);\n    },\n    ntpCliEnabled() {\n      return this.$system.initEnabled('sysntpd');\n    },\n    ntpCliEnableApply(v) {\n      return new Promise(resolve => {\n        if (v) {\n          this.$system.initStart('sysntpd').then(() => {\n            this.$system.initEnable('sysntpd').then(() => {\n              resolve();\n            });\n          });\n        } else {\n          this.$system.initStop('sysntpd').then(() => {\n            this.$system.initDisable('sysntpd').then(() => {\n              resolve();\n            });\n          });\n        }\n      });\n    },\n    updateHostname(value) {\n      this.$store.commit('setHostname', value);\n    }\n  }\n}\n</script>\n"]}]}