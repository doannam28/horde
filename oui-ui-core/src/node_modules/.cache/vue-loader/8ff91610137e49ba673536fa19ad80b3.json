{"remainingRequest":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\firewall\\zone.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\firewall\\zone.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    zones: Array,\n    targets: Array\n  },\n  data() {\n    return {\n      interfaces: [],\n      families:[\n        ['', this.$t('IPv4 and IPv6')],\n        ['ipv4', this.$t('IPv4 only')],\n        ['ipv6', this.$t('IPv6 only')]\n      ]\n    }\n  },\n  methods: {\n    loadDestZones(sid) {\n      const z = this.$firewall.findZoneBySid(sid);\n      return z.findForwardsBy('src').map(z => z.dest());\n    },\n    loadSrcZones(sid) {\n      const z = this.$firewall.findZoneBySid(sid);\n      return z.findForwardsBy('dest').map(z => z.src());\n    },\n    excludeZone(sid) {\n      const z = this.$firewall.findZoneBySid(sid);\n      if (z)\n        return z.name();\n      return undefined;\n    },\n    saveDestZones(sid, value) {\n      const z = this.$firewall.findZoneBySid(sid);\n      const dests = value;\n      let i = 0;\n\n      this.$firewall.forwards.forEach(fwd => {\n        if (fwd.src() !== z.name())\n          return;\n\n        if (i < dests.length)\n          fwd.set('dest', dests[i++]);\n        else\n          this.$uci.del('firewall', fwd.sid);\n      });\n\n      while (i < dests.length) {\n        const sid = this.$uci.add('firewall', 'forwarding');\n\n        this.$uci.set('firewall', sid, 'src', z.name());\n        this.$uci.set('firewall', sid, 'dest', dests[i++]);\n      }\n    },\n    saveSrcZones(sid, value) {\n      const z = this.$firewall.findZoneBySid(sid);\n      const srcs = value;\n      let i = 0;\n\n      this.$firewall.forwards.forEach(fwd => {\n        if (fwd.dest() !== z.name())\n          return;\n\n        if (i < srcs.length)\n          fwd.set('src', srcs[i++]);\n        else\n          this.$uci.del('firewall', fwd.sid);\n      });\n\n      while (i < srcs.length) {\n        const sid = this.$uci.add('firewall', 'forwarding');\n\n        this.$uci.set('firewall', sid, 'src', srcs[i++]);\n        this.$uci.set('firewall', sid, 'dest', z.name());\n      }\n    },\n    beforeDelZone(sid) {\n      const z = this.$firewall.findZoneBySid(sid);\n      this.$firewall.forwards.forEach(fwd => {\n        if (fwd.src() !== z.name() && fwd.dest() !== z.name())\n          return;\n        this.$uci.del('firewall', fwd.sid);\n      });\n    },\n    addZone(self) {\n      return new Promise(resolve => {\n        this.$prompt(this.$t('Please input a name'), this.$t('Add'), {\n          inputValidator: value => {\n            if (!value)\n              return true;\n\n            const sections = self.sections;\n            for (let i = 0; i < sections.length; i++)\n              if (sections[i].name === value)\n                return this.$t('Name already used');\n\n            return true;\n          }\n        }).then(r => {\n          if (!r.value)\n            return;\n\n          const z = this.$firewall.createZone(r.value);\n          resolve(z.sid);\n        });\n      });\n    }\n  },\n  created() {\n    this.$network.load().then(() => {\n      this.interfaces = this.$network.getInterfaces().map(item => item.name);\n    });\n  }\n}\n",{"version":3,"sources":["zone.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAufile":"zone.vue","sourceRoot":"src/views/network/firewall","sourcesContent":["<template>\n  <uci-section type=\"zone\" :title=\"$t('Zones')\" table addable :add=\"addZone\" :before-del=\"beforeDelZone\">\n    <uci-option-dummy :label=\"$t('Name')\" name=\"name\"></uci-option-dummy>\n    <uci-option-list :label=\"$t('Input')\" name=\"input\" :options=\"targets\" initial=\"ACCEPT\" required></uci-option-list>\n    <uci-option-list :label=\"$t('Output')\" name=\"output\" :options=\"targets\" initial=\"ACCEPT\" required></uci-option-list>\n    <uci-option-list :label=\"$t('Forward')\" name=\"forward\" :options=\"targets\" initial=\"REJECT\" required></uci-option-list>\n    <uci-option-switch :label=\"$t('Masquerading')\" name=\"masq\"></uci-option-switch>\n    <uci-option-switch :label=\"$t('MSS clamping')\" name=\"mtu_fix\"></uci-option-switch>\n    <uci-table-expand>\n      <uci-option-list :label=\"$t('Covered networks')\" name=\"network\" :options=\"interfaces\" multiple></uci-option-list>\n      <uci-option-list :label=\"$t('Restrict to address family')\" name=\"family\" :options=\"families\"></uci-option-list>\n      <uci-option-dlist :label=\"$t('Restrict Masquerading to given source subnets')\" name=\"masq_src\" :options=\"families\" depend=\"family == '' || family == 'ipv4'\"></uci-option-dlist>\n      <uci-option-dlist :label=\"$t('Restrict Masquerading to given destination subnets')\" name=\"masq_dest\" :options=\"families\" depend=\"family == '' || family == 'ipv4'\"></uci-option-dlist>\n      <uci-option-switch :label=\"$t('Force connection tracking')\" name=\"conntrack\"></uci-option-switch>\n      <uci-option-switch :label=\"$t('Enable logging on this zone')\" name=\"log\"></uci-option-switch>\n      <uci-option-input :label=\"$t('Limit log messages')\" name=\"log_limit\" placeholder=\"10/minute\" depend=\"log\"></uci-option-input>\n      <uci-option-list :label=\"$t('Allow forward to destination zones')\" name=\"out\" :load=\"loadDestZones\" :save=\"saveDestZones\" :options=\"zones\" :exclude=\"excludeZone\" multiple></uci-option-list>\n      <uci-option-list :label=\"$t('Allow forward from source zones')\" name=\"in\" :load=\"loadSrcZones\" :save=\"saveSrcZones\" :options=\"zones\" :exclude=\"excludeZone\" multiple></uci-option-list>\n    </uci-table-expand>\n  </uci-section>\n</template>\n\n<script>\nexport default {\n  props: {\n    zones: Array,\n    targets: Array\n  },\n  data() {\n    return {\n      interfaces: [],\n      families:[\n        ['', this.$t('IPv4 and IPv6')],\n        ['ipv4', this.$t('IPv4 only')],\n        ['ipv6', this.$t('IPv6 only')]\n      ]\n    }\n  },\n  methods: {\n    loadDestZones(sid) {\n      const z = this.$firewall.findZoneBySid(sid);\n      return z.findForwardsBy('src').map(z => z.dest());\n    },\n    loadSrcZones(sid) {\n      const z = this.$firewall.findZoneBySid(sid);\n      return z.findForwardsBy('dest').map(z => z.src());\n    },\n    excludeZone(sid) {\n      const z = this.$firewall.findZoneBySid(sid);\n      if (z)\n        return z.name();\n      return undefined;\n    },\n    saveDestZones(sid, value) {\n      const z = this.$firewall.findZoneBySid(sid);\n      const dests = value;\n      let i = 0;\n\n      this.$firewall.forwards.forEach(fwd => {\n        if (fwd.src() !== z.name())\n          return;\n\n        if (i < dests.length)\n          fwd.set('dest', dests[i++]);\n        else\n          this.$uci.del('firewall', fwd.sid);\n      });\n\n      while (i < dests.length) {\n        const sid = this.$uci.add('firewall', 'forwarding');\n\n        this.$uci.set('firewall', sid, 'src', z.name());\n        this.$uci.set('firewall', sid, 'dest', dests[i++]);\n      }\n    },\n    saveSrcZones(sid, value) {\n      const z = this.$firewall.findZoneBySid(sid);\n      const srcs = value;\n      let i = 0;\n\n      this.$firewall.forwards.forEach(fwd => {\n        if (fwd.dest() !== z.name())\n          return;\n\n        if (i < srcs.length)\n          fwd.set('src', srcs[i++]);\n        else\n          this.$uci.del('firewall', fwd.sid);\n      });\n\n      while (i < srcs.length) {\n        const sid = this.$uci.add('firewall', 'forwarding');\n\n        this.$uci.set('firewall', sid, 'src', srcs[i++]);\n        this.$uci.set('firewall', sid, 'dest', z.name());\n      }\n    },\n    beforeDelZone(sid) {\n      const z = this.$firewall.findZoneBySid(sid);\n      this.$firewall.forwards.forEach(fwd => {\n        if (fwd.src() !== z.name() && fwd.dest() !== z.name())\n          return;\n        this.$uci.del('firewall', fwd.sid);\n      });\n    },\n    addZone(self) {\n      return new Promise(resolve => {\n        this.$prompt(this.$t('Please input a name'), this.$t('Add'), {\n          inputValidator: value => {\n            if (!value)\n              return true;\n\n            const sections = self.sections;\n            for (let i = 0; i < sections.length; i++)\n              if (sections[i].name === value)\n                return this.$t('Name already used');\n\n            return true;\n          }\n        }).then(r => {\n          if (!r.value)\n            return;\n\n          const z = this.$firewall.createZone(r.value);\n          resolve(z.sid);\n        });\n      });\n    }\n  },\n  created() {\n    this.$network.load().then(() => {\n      this.interfaces = this.$network.getInterfaces().map(item => item.name);\n    });\n  }\n}\n</script>\n"]}]}