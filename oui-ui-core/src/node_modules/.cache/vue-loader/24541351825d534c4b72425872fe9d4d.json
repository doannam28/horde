{"remainingRequest":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\home.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\home.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/chart/gauge'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/polar'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/legendScroll'\n\nexport default {\n  data() {\n    return {\n      tab: 'router',\n      statusLineLength: '27%',\n      sysinfo: [],\n      waninfo: [],\n      devices: [],\n      devicesMap: {},\n      leases: [],\n      leases6: [],\n      assoclist: [],\n      wanIsUp: false,\n      lastCPUTime: null,\n      resourceChart: {\n        tooltip: {\n          formatter: '{b}: {c}%'\n        },\n        series: [\n          {\n            type: 'gauge',\n            radius: '60%',\n            center: ['25%', '50%'],\n            splitLine: {length: 20},\n            axisLine: {lineStyle: {width: 8}},\n            detail: {formatter: '{value}%', fontSize: 15},\n            data: [{value: 0, name: this.$t('CPU usage')}]\n          },\n          {\n            type: 'gauge',\n            radius: '60%',\n            center: ['75%', '50%'],\n            splitLine: {length: 20},\n            axisLine: {lineStyle: {width: 8}},\n            detail: {formatter: '{value}%', fontSize: 15},\n            data: [{value: 0, name: this.$t('Memory usage')}]\n          }\n        ]\n      }\n    }\n  },\n  timers: {\n    update: {time: 2000, autostart: true, immediate: true, repeat: true}\n  },\n  methods: {\n    wifirate(sta, rx) {\n      const rate = rx ? sta.rx : sta.tx;\n      let s = '%.1f Mbit/s'.format(rate.rate / 1000);\n      s += ', %dMHz'.format(rate['40mhz'] ? 40 : 20);\n\n      if (rate.mcs > 0)\n        s += ', MCS ' + rate.mcs;\n\n      if (rate.short_gi)\n        s += ', Short GI'\n\n      return s;\n    },\n    wifiSignalIcon(s) {\n      let q = (-1 * (s.noise - s.signal)) / 5;\n      if (q < 1)\n        q = 1;\n      else if (q < 2)\n        q = 2;\n      else if (q < 3)\n        q = 3;\n      else if (q < 4)\n        q = 4;\n      else\n        q = 5;\n      return `/icons/signal_${q}.png`;\n    },\n    formatWifiRxRate(row) {\n      return this.wifirate(row, true);\n    },\n    formatWifiTxRate(row) {\n      return this.wifirate(row, false);\n    },\n    calcDevFlow(flow) {\n      return flow[0] * 1000000000 + flow[1] * 1000000 + flow[2] * 1000 + flow[3];\n    },\n    update() {\n      this.$ubus.call('oui.system', 'cpu_time').then(({times}) => {\n        if (!this.lastCPUTime) {\n          this.lastCPUTime = times;\n          return;\n        }\n\n        let idle1 = this.lastCPUTime[3] + this.lastCPUTime[4];\n        let idle2 = times[3] + times[4];\n\n        let total1 = 0;\n        let total2 = 0;\n\n        this.lastCPUTime.forEach(t => {\n          total1 += t;\n        });\n\n        times.forEach(t => {\n          total2 += t;\n        });\n\n        this.resourceChart.series[0].data[0].value = (((total2 - total1) - (idle2 - idle1)) / (total2 - total1) * 100).toFixed(2)\n        this.lastCPUTime = times;\n      });\n\n      this.$system.getInfo().then(({hostname, model, system, release, kernel, localtime, uptime, memory}) => {\n        this.sysinfo = [\n          [this.$t('Hostname'), hostname],\n          [this.$t('Model'), model],\n          [this.$t('Architecture'), system],\n          [this.$t('Firmware Version'), release.revision],\n          [this.$t('Kernel Version'), kernel],\n          [this.$t('Local Time'), new Date(localtime * 1000).toString()],\n          [this.$t('Uptime'), '%t'.format(uptime)]\n        ];\n\n        this.resourceChart.series[1].data[0].value = ((memory.total - memory.free) / memory.total * 100).toFixed(2);\n      });\n\n      this.$network.load().then(() => {\n        const iface = this.$network.getInterface('wan');\n        this.waninfo = [\n          [this.$t('IP Address'), iface.getIPv4Addrs().join(', ')],\n          [this.$t('Gateway'), iface.getIPv4Gateway()],\n          ['DNS', iface.getDNSAddrs().join(', ')]\n        ];\n        this.wanIsUp = iface.isUp()\n      });\n\n      this.$ubus.call('oui.network', 'dhcp_leases').then(r => {\n        const leasesMap = {};\n\n        this.leases = r.leases;\n\n        this.leases.forEach(l => {\n          leasesMap[l.macaddr] = {hostname: l.hostname, ipaddr: l.ipaddr};\n        });\n\n        this.$ubus.call('oui.network', 'bwm').then(r => {\n          this.devices = r.entries.map(dev => {\n            const lease = leasesMap[dev.macaddr];\n\n            dev = {...dev, txrate: 0, rxrate: 0};\n            dev.tx = this.calcDevFlow(dev.tx);\n            dev.rx = this.calcDevFlow(dev.rx);\n\n            const ldev = this.devicesMap[dev.macaddr];\n            if (ldev) {\n              dev.txrate = '%mB/s'.format((dev.tx - ldev.tx) / 2);\n              dev.rxrate = '%mB/s'.format((dev.rx - ldev.rx) / 2);\n            }\n\n            this.devicesMap[dev.macaddr] = {tx: dev.tx, rx: dev.rx};\n\n            if (lease)\n              dev.hostname = lease.hostname;\n\n            return dev;\n          });\n        });\n\n        this.$wireless.getAssoclist().then(assoclist => {\n          this.assoclist = assoclist.map(sta => {\n            const lease = leasesMap[sta.mac.toLowerCase()];\n            if (lease)\n              sta.host = `${lease.hostname} (${lease.ipaddr})`\n            return sta;\n          });\n        });\n      });\n\n      this.$ubus.call('oui.network', 'dhcp6_leases').then(r => {\n        this.leases6 = r.leases;\n      });\n    }\n  }\n}\n",{"version":3,"sources":["home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <el-row type=\"flex\" justify=\"center\" align=\"middle\" class=\"oui-home-status-img\">\n      <img src=\"/icons/devices.png\" @click=\"tab = 'devices'\" />\n      <oui-line :length=\"statusLineLength\"></oui-line>\n      <img src=\"/icons/router.png\" @click=\"tab = 'router'\" />\n      <oui-line :length=\"statusLineLength\" :disconnect=\"!wanIsUp\"></oui-line>\n      <img src=\"/icons/internet.png\" @click=\"tab = 'internet'\" />\n    </el-row>\n    <el-tabs v-model=\"tab\" stretch>\n      <el-tab-pane name=\"devices\">\n        <span slot=\"label\">{{ $t('Terminal devices') + `(${devices.length})` }}</span>\n        <el-card :header=\"$t('Online devices')\" style=\"margin-bottom: 15px;\">\n          <el-table :data=\"devices\">\n            <el-table-column :label=\"$t('Hostname')\" prop=\"hostname\"></el-table-column>\n            <el-table-column :label=\"$t('IPv4-Address')\" prop=\"ipaddr\"></el-table-column>\n            <el-table-column :label=\"$t('MAC-Address')\" prop=\"macaddr\"></el-table-column>\n            <el-table-column :label=\"$t('RX Rate')\" prop=\"rxrate\"></el-table-column>\n            <el-table-column :label=\"$t('TX Rate')\" prop=\"txrate\"></el-table-column>\n          </el-table>\n        </el-card>\n        <el-card :header=\"$t('Active DHCP Leases')\" style=\"margin-bottom: 15px;\">\n          <el-table :data=\"leases\">\n            <el-table-column :label=\"$t('Hostname')\" prop=\"hostname\"></el-table-column>\n            <el-table-column :label=\"$t('IPv4-Address')\" prop=\"ipaddr\"></el-table-column>\n            <el-table-column :label=\"$t('MAC-Address')\" prop=\"macaddr\"></el-table-column>\n            <el-table-column :label=\"$t('Leasetime remaining')\" :formatter=\"row => row.expires <= 0 ? $t('expired') : '%t'.format(row.expires)\"></el-table-column>\n          </el-table>\n        </el-card>\n        <el-card :header=\"$t('Active DHCPv6 Leases')\" style=\"margin-bottom: 15px;\">\n          <el-table :data=\"leases6\">\n            <el-table-column :label=\"$t('Host')\" prop=\"name\"></el-table-column>\n            <el-table-column :label=\"$t('IPv6-Address')\" prop=\"ip6addr\"></el-table-column>\n            <el-table-column label=\"DUID\" prop=\"duid\"></el-table-column>\n            <el-table-column :label=\"$t('Leasetime remaining')\" :formatter=\"row => row.expires <= 0 ? $t('expired') : '%t'.format(row.expires)\"></el-table-column>\n          </el-table>\n        </el-card>\n        <el-card :header=\"$t('Associated Stations')\">\n          <el-table :data=\"assoclist\">\n            <el-table-column :label=\"$t('MAC-Address')\" prop=\"mac\"></el-table-column>\n            <el-table-column :label=\"$t('Host')\" prop=\"host\"></el-table-column>\n            <el-table-column :label=\"$t('Signal') + ' / ' + $t('Noise')\">\n              <template v-slot=\"{row}\">\n                <img :src=\"wifiSignalIcon(row)\" />\n                <span>{{' ' + row.signal + '/' + row.noise + ' dBm' }}</span>\n              </template>\n            </el-table-column>\n            <el-table-column :label=\"$t('RX Rate')\" :formatter=\"formatWifiRxRate\"></el-table-column>\n            <el-table-column :label=\"$t('TX Rate')\" :formatter=\"formatWifiTxRate\"></el-table-column>\n          </el-table>\n        </el-card>\n      </el-tab-pane>\n      <el-tab-pane name=\"router\">\n        <span slot=\"label\">{{ $t('System') }}</span>\n        <el-row :gutter=\"20\" style=\"margin-bottom: 15px\">\n          <el-col :span=\"12\">\n            <card-list :title=\"$t('System information')\" :list=\"sysinfo\"></card-list>\n          </el-col>\n          <el-col :span=\"12\">\n            <el-card :header=\"$t('Resource usage')\">\n              <e-charts style=\"width: 100%\" :options=\"resourceChart\"></e-charts>\n            </el-card>\n          </el-col>\n        </el-row>\n      </el-tab-pane>\n      <el-tab-pane name=\"internet\">\n        <span slot=\"label\">WAN</span>\n        <el-row type=\"flex\" justify=\"center\">\n          <CardList :title=\"$t('Network')\" :list=\"waninfo\" style=\"width: 600px\"></CardList>\n        </el-row>\n      </el-tab-pane>\n    </el-tabs>\n  </div>\n</template>\n\n<script>\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/chart/gauge'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/polar'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/legendScroll'\n\nexport default {\n  data() {\n    return {\n      tab: 'router',\n      statusLineLength: '27%',\n      sysinfo: [],\n      waninfo: [],\n      devices: [],\n      devicesMap: {},\n      leases: [],\n      leases6: [],\n      assoclist: [],\n      wanIsUp: false,\n      lastCPUTime: null,\n      resourceChart: {\n        tooltip: {\n          formatter: '{b}: {c}%'\n        },\n        series: [\n          {\n            type: 'gauge',\n            radius: '60%',\n            center: ['25%', '50%'],\n            splitLine: {length: 20},\n            axisLine: {lineStyle: {width: 8}},\n            detail: {formatter: '{value}%', fontSize: 15},\n            data: [{value: 0, name: this.$t('CPU usage')}]\n          },\n          {\n            type: 'gauge',\n            radius: '60%',\n            center: ['75%', '50%'],\n            splitLine: {length: 20},\n            axisLine: {lineStyle: {width: 8}},\n            detail: {formatter: '{value}%', fontSize: 15},\n            data: [{value: 0, name: this.$t('Memory usage')}]\n          }\n        ]\n      }\n    }\n  },\n  timers: {\n    update: {time: 2000, autostart: true, immediate: true, repeat: true}\n  },\n  methods: {\n    wifirate(sta, rx) {\n      const rate = rx ? sta.rx : sta.tx;\n      let s = '%.1f Mbit/s'.format(rate.rate / 1000);\n      s += ', %dMHz'.format(rate['40mhz'] ? 40 : 20);\n\n      if (rate.mcs > 0)\n        s += ', MCS ' + rate.mcs;\n\n      if (rate.short_gi)\n        s += ', Short GI'\n\n      return s;\n    },\n    wifiSignalIcon(s) {\n      let q = (-1 * (s.noise - s.signal)) / 5;\n      if (q < 1)\n        q = 1;\n      else if (q < 2)\n        q = 2;\n      else if (q < 3)\n        q = 3;\n      else if (q < 4)\n        q = 4;\n      else\n        q = 5;\n      return `/icons/signal_${q}.png`;\n    },\n    formatWifiRxRate(row) {\n      return this.wifirate(row, true);\n    },\n    formatWifiTxRate(row) {\n      return this.wifirate(row, false);\n    },\n    calcDevFlow(flow) {\n      return flow[0] * 1000000000 + flow[1] * 1000000 + flow[2] * 1000 + flow[3];\n    },\n    update() {\n      this.$ubus.call('oui.system', 'cpu_time').then(({times}) => {\n        if (!this.lastCPUTime) {\n          this.lastCPUTime = times;\n          return;\n        }\n\n        let idle1 = this.lastCPUTime[3] + this.lastCPUTime[4];\n        let idle2 = times[3] + times[4];\n\n        let total1 = 0;\n        let total2 = 0;\n\n        this.lastCPUTime.forEach(t => {\n          total1 += t;\n        });\n\n        times.forEach(t => {\n          total2 += t;\n        });\n\n        this.resourceChart.series[0].data[0].value = (((total2 - total1) - (idle2 - idle1)) / (total2 - total1) * 100).toFixed(2)\n        this.lastCPUTime = times;\n      });\n\n      this.$system.getInfo().then(({hostname, model, system, release, kernel, localtime, uptime, memory}) => {\n        this.sysinfo = [\n          [this.$t('Hostname'), hostname],\n          [this.$t('Model'), model],\n          [this.$t('Architecture'), system],\n          [this.$t('Firmware Version'), release.revision],\n          [this.$t('Kernel Version'), kernel],\n          [this.$t('Local Time'), new Date(localtime * 1000).toString()],\n          [this.$t('Uptime'), '%t'.format(uptime)]\n        ];\n\n        this.resourceChart.series[1].data[0].value = ((memory.total - memory.free) / memory.total * 100).toFixed(2);\n      });\n\n      this.$network.load().then(() => {\n        const iface = this.$network.getInterface('wan');\n        this.waninfo = [\n          [this.$t('IP Address'), iface.getIPv4Addrs().join(', ')],\n          [this.$t('Gateway'), iface.getIPv4Gateway()],\n          ['DNS', iface.getDNSAddrs().join(', ')]\n        ];\n        this.wanIsUp = iface.isUp()\n      });\n\n      this.$ubus.call('oui.network', 'dhcp_leases').then(r => {\n        const leasesMap = {};\n\n        this.leases = r.leases;\n\n        this.leases.forEach(l => {\n          leasesMap[l.macaddr] = {hostname: l.hostname, ipaddr: l.ipaddr};\n        });\n\n        this.$ubus.call('oui.network', 'bwm').then(r => {\n          this.devices = r.entries.map(dev => {\n            const lease = leasesMap[dev.macaddr];\n\n            dev = {...dev, txrate: 0, rxrate: 0};\n            dev.tx = this.calcDevFlow(dev.tx);\n            dev.rx = this.calcDevFlow(dev.rx);\n\n            const ldev = this.devicesMap[dev.macaddr];\n            if (ldev) {\n              dev.txrate = '%mB/s'.format((dev.tx - ldev.tx) / 2);\n              dev.rxrate = '%mB/s'.format((dev.rx - ldev.rx) / 2);\n            }\n\n            this.devicesMap[dev.macaddr] = {tx: dev.tx, rx: dev.rx};\n\n            if (lease)\n              dev.hostname = lease.hostname;\n\n            return dev;\n          });\n        });\n\n        this.$wireless.getAssoclist().then(assoclist => {\n          this.assoclist = assoclist.map(sta => {\n            const lease = leasesMap[sta.mac.toLowerCase()];\n            if (lease)\n              sta.host = `${lease.hostname} (${lease.ipaddr})`\n            return sta;\n          });\n        });\n      });\n\n      this.$ubus.call('oui.network', 'dhcp6_leases').then(r => {\n        this.leases6 = r.leases;\n      });\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.oui-home-status-img {\n  img {\n    cursor: pointer;\n  }\n}\n</style>\n"]}]}