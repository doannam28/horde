{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\components\\uci-form\\src\\uci-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\components\\uci-form\\src\\uci-form.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport UciFormBody from './uci-form-body'\n\nexport default {\n  name: 'UciForm',\n  provide() {\n    return {\n      uciForm: this\n    };\n  },\n  props: {\n    config: {\n      type: String,\n      required: true\n    },\n    tabbed: Boolean,\n    afterLoaded: Function,\n    applyTimeout: Number, /* timeout for apply(second) */\n    rollback: {\n      type: Boolean,\n      default: true\n    }\n  },\n  components: {\n    UciFormBody\n  },\n  data() {\n    return {\n      loaded: false, /* Indicates whether the data is loaded */\n      uid: 0, /* Used for unique identification of each uci-option vue instance */\n      form: {},\n      rules: {},\n      validates: {},\n      sections: [], /* UciSection vue instances */\n      readonly: true\n    }\n  },\n  methods: {\n    getUID() {\n      return this.uid++;\n    },\n    getErrorNum(sid, tab) {\n      const validates = this.validates;\n      const keys = Object.keys(validates).filter(key => {\n        const err = sid === key.split('_')[0] && !validates[key].valid;\n        if (tab)\n          return err && validates[key].tab === tab;\n        return err;\n      });\n\n      return keys.length;\n    },\n    addProp(prop, data) {\n      this.$set(this.form, prop, data.value);\n      this.$set(this.rules, prop, data.rules);\n      this.$set(this.validates, prop, {valid: true, tab: data.tab});\n    },\n    delProp(prop) {\n      this.$delete(this.form, prop);\n      this.$delete(this.rules, prop);\n      this.$delete(this.validates, prop);\n    },\n    load() {\n      return new Promise(resolve => {\n        this.$uci.load(this.config).then(() => {\n          this.readonly = !this.$uci.writable(this.config);\n          if (this.afterLoaded)\n            this.afterLoaded();\n          resolve();\n        });\n      });\n    },\n    onValidate(name, valid) {\n      if (this.validates[name])\n        this.validates[name].valid = valid;\n    },\n    save() {\n      return new Promise(resolve => {\n        const promises = [];\n\n        this.sections.forEach(s => {\n          promises.push(...s.save());\n        });\n\n        if (promises.length > 0) {\n          Promise.all(promises).then(() => {\n            resolve();\n          });\n        } else {\n          resolve();\n        }\n      });\n    },\n    apply() {\n      this.$refs['form'].validate(valid => {\n        if (!valid)\n          return;\n\n        this.save().then(() => {\n          const promises = [];\n\n          this.sections.forEach(s => {\n            promises.push(...s.apply());\n          });\n\n          if (this.$uci.changed() > 0) {\n            const p = new Promise(resolve => {\n              this.$uci.save().then(() => {\n                this.$uci.apply(this.applyTimeout, this.rollback).then(() => {\n                  resolve();\n                });\n              });\n            });\n            promises.push(p);\n          }\n\n          if (promises.length === 0) {\n            this.$message.warning(this.$t('There are no changes to apply'));\n            return;\n          }\n\n          const loading = this.$getLoading(this.$t('Waiting for configuration to be applied...'));\n\n          Promise.all(promises).then(() => {\n            this.load().then(() => {\n              this.reset();\n              loading.close();\n              this.$message.success(this.$t('Configuration has been applied'));\n\n              this.$emit('applied');\n\n              this.sections.forEach(s => {\n                s.applied();\n              });\n            });\n          });\n        });\n      });\n    },\n    reset() {\n      this.form = {};\n      this.rules = {};\n      this.validates = {};\n      this.$uci.reset();\n\n      this.sections.forEach(s => {\n        s.activeCollapseItem = '';\n        s.load();\n        s.buildForm();\n      });\n    }\n  },\n  created() {\n    const loading = this.$getLoading(this.$t('Loading...'));\n    this.load().then(() => {\n      this.loaded = true;\n      loading.close();\n    });\n  },\n  destroyed() {\n    this.$uci.reset();\n  }\n}\n",{"version":3,"sources":["uci-form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"uci-form.vue","sourceRoot":"src/components/uci-form/src","sourcesContent":["<template>\n  <div>\n    <div style=\"visibility: hidden\"><slot></slot></div>\n    <el-form ref=\"form\" label-width=\"280px\" :model=\"form\" :rules=\"rules\" :disabled=\"readonly\" @validate=\"onValidate\">\n      <uci-form-body></uci-form-body>\n    </el-form>\n    <el-button-group style=\"margin-right: 50px; float: right\">\n      <el-button :disabled=\"readonly\" type=\"primary\" @click=\"apply\">{{ $t('Save & Apply') }}</el-button>\n      <el-button :disabled=\"readonly\" type=\"warning\" @click=\"reset\">{{ $t('Reset') }}</el-button>\n    </el-button-group>\n  </div>\n</template>\n\n<script>\nimport UciFormBody from './uci-form-body'\n\nexport default {\n  name: 'UciForm',\n  provide() {\n    return {\n      uciForm: this\n    };\n  },\n  props: {\n    config: {\n      type: String,\n      required: true\n    },\n    tabbed: Boolean,\n    afterLoaded: Function,\n    applyTimeout: Number, /* timeout for apply(second) */\n    rollback: {\n      type: Boolean,\n      default: true\n    }\n  },\n  components: {\n    UciFormBody\n  },\n  data() {\n    return {\n      loaded: false, /* Indicates whether the data is loaded */\n      uid: 0, /* Used for unique identification of each uci-option vue instance */\n      form: {},\n      rules: {},\n      validates: {},\n      sections: [], /* UciSection vue instances */\n      readonly: true\n    }\n  },\n  methods: {\n    getUID() {\n      return this.uid++;\n    },\n    getErrorNum(sid, tab) {\n      const validates = this.validates;\n      const keys = Object.keys(validates).filter(key => {\n        const err = sid === key.split('_')[0] && !validates[key].valid;\n        if (tab)\n          return err && validates[key].tab === tab;\n        return err;\n      });\n\n      return keys.length;\n    },\n    addProp(prop, data) {\n      this.$set(this.form, prop, data.value);\n      this.$set(this.rules, prop, data.rules);\n      this.$set(this.validates, prop, {valid: true, tab: data.tab});\n    },\n    delProp(prop) {\n      this.$delete(this.form, prop);\n      this.$delete(this.rules, prop);\n      this.$delete(this.validates, prop);\n    },\n    load() {\n      return new Promise(resolve => {\n        this.$uci.load(this.config).then(() => {\n          this.readonly = !this.$uci.writable(this.config);\n          if (this.afterLoaded)\n            this.afterLoaded();\n          resolve();\n        });\n      });\n    },\n    onValidate(name, valid) {\n      if (this.validates[name])\n        this.validates[name].valid = valid;\n    },\n    save() {\n      return new Promise(resolve => {\n        const promises = [];\n\n        this.sections.forEach(s => {\n          promises.push(...s.save());\n        });\n\n        if (promises.length > 0) {\n          Promise.all(promises).then(() => {\n            resolve();\n          });\n        } else {\n          resolve();\n        }\n      });\n    },\n    apply() {\n      this.$refs['form'].validate(valid => {\n        if (!valid)\n          return;\n\n        this.save().then(() => {\n          const promises = [];\n\n          this.sections.forEach(s => {\n            promises.push(...s.apply());\n          });\n\n          if (this.$uci.changed() > 0) {\n            const p = new Promise(resolve => {\n              this.$uci.save().then(() => {\n                this.$uci.apply(this.applyTimeout, this.rollback).then(() => {\n                  resolve();\n                });\n              });\n            });\n            promises.push(p);\n          }\n\n          if (promises.length === 0) {\n            this.$message.warning(this.$t('There are no changes to apply'));\n            return;\n          }\n\n          const loading = this.$getLoading(this.$t('Waiting for configuration to be applied...'));\n\n          Promise.all(promises).then(() => {\n            this.load().then(() => {\n              this.reset();\n              loading.close();\n              this.$message.success(this.$t('Configuration has been applied'));\n\n              this.$emit('applied');\n\n              this.sections.forEach(s => {\n                s.applied();\n              });\n            });\n          });\n        });\n      });\n    },\n    reset() {\n      this.form = {};\n      this.rules = {};\n      this.validates = {};\n      this.$uci.reset();\n\n      this.sections.forEach(s => {\n        s.activeCollapseItem = '';\n        s.load();\n        s.buildForm();\n      });\n    }\n  },\n  created() {\n    const loading = this.$getLoading(this.$t('Loading...'));\n    this.load().then(() => {\n      this.loaded = true;\n      loading.close();\n    });\n  },\n  destroyed() {\n    this.$uci.reset();\n  }\n}\n</script>\n"]}]}