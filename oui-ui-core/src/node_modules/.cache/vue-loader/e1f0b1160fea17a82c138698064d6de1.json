{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\interfaces\\proto\\dhcp.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\interfaces\\proto\\dhcp.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport mixin from './proto'\nimport OverrideMac from './override-mac'\nimport OverrideMtu from './override-mtu'\n\nexport default {\n  mixins: [mixin],\n  inject: ['uciSection'],\n  data() {\n    return {\n      virtual: false,\n      floating: false,\n      macaddr: ''\n    }\n  },\n  components: {\n    OverrideMac,\n    OverrideMtu\n  },\n  computed: {\n    hostname() {\n      return this.$store.state.hostname;\n    },\n    interfaceName() {\n      return this.uciSection.name;\n    }\n  },\n  created() {\n    const iface = this.$network.getInterface(this.uciSection.name);\n    const dev = iface.getDevice();\n    if (dev)\n      this.macaddr = dev.macaddr;\n  }\n}\n",{"version":3,"sources":["dhcp.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dhcp.vue","sourceRoot":"src/views/network/interfaces/proto","sourcesContent":["<template>\n  <div>\n    <uci-option-input tab=\"general\" :label=\"$t('Hostname to send when requesting DHCP')\" name=\"hostname\" :placeholder=\"hostname\" rules=\"hostname\"></uci-option-input>\n    <uci-option-switch tab=\"advanced\" :label=\"$t('Use broadcast flag')\" name=\"broadcast\" :description=\"$t('Required for certain ISPs, e.g. Charter with DOCSIS3')\"></uci-option-switch>\n    <uci-option-switch tab=\"advanced\" :label=\"$t('Use default gateway')\" name=\"defaultroute\" initial=\"1\" :description=\"$t('If unchecked, no default route is configured')\"></uci-option-switch>\n    <uci-option-switch tab=\"advanced\" :label=\"$t('Use DNS servers advertised by peer')\" name=\"peerdns\" initial=\"1\"></uci-option-switch>\n    <uci-option-dlist tab=\"advanced\" :label=\"$t('Use custom DNS servers')\" name=\"dns\" depend=\"!peerdns\" rules=\"ipaddr\"></uci-option-dlist>\n    <uci-option-input tab=\"advanced\" :label=\"$t('Client ID')\" name=\"clientid\" :description=\"$t('Client ID to send when requesting DHCP')\"></uci-option-input>\n    <uci-option-input tab=\"advanced\" label=\"Vendor Class\" name=\"vendorid\" :description=\"$t('Vendor Class to send when requesting DHCP')\"></uci-option-input>\n    <override-mac></override-mac>\n    <override-mtu></override-mtu>\n    <uci-option-input tab=\"advanced\" :label=\"$t('Override MTU')\" name=\"mtu\" placeholder=\"1500\" :rules=\"{type: 'uinteger', max: 9200}\"></uci-option-input>\n  </div>\n</template>\n\n<script>\nimport mixin from './proto'\nimport OverrideMac from './override-mac'\nimport OverrideMtu from './override-mtu'\n\nexport default {\n  mixins: [mixin],\n  inject: ['uciSection'],\n  data() {\n    return {\n      virtual: false,\n      floating: false,\n      macaddr: ''\n    }\n  },\n  components: {\n    OverrideMac,\n    OverrideMtu\n  },\n  computed: {\n    hostname() {\n      return this.$store.state.hostname;\n    },\n    interfaceName() {\n      return this.uciSection.name;\n    }\n  },\n  created() {\n    const iface = this.$network.getInterface(this.uciSection.name);\n    const dev = iface.getDevice();\n    if (dev)\n      this.macaddr = dev.macaddr;\n  }\n}\n</script>\n"]}]}