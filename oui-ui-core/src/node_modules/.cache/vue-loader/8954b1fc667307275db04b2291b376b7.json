{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\system\\software.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\system\\software.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data() {\n    return {\n      diskInfo: {\n        used: 0,\n        total: 0\n      },\n      diskSpace: 0,\n      packageName: '',\n      filter: '',\n      packages: [],\n      total: 0,\n      limit: 50,\n      currentPage: 1,\n      displayInstalled: false,\n      installedList: {},\n      loading: true\n    }\n  },\n  computed: {\n    diskUsedPercentage() {\n      if (this.diskInfo.used === 0)\n        return 0;\n      return parseInt(this.diskInfo.used / this.diskInfo.total * 100);\n    },\n    diskUsedDetailed() {\n      const used = parseInt(this.diskInfo.used / 1024) + ' KB';\n      const total = parseInt(this.diskInfo.total / 1024) + ' KB';\n      return `${used} / ${total} ` + this.$t('used');\n    }\n  },\n  methods: {\n    doFetchPackageList(cmd, offset, limit, pattern) {\n      return new Promise((resolve, reject) => {\n        this.$ubus.call('oui.opkg', cmd, {offset, limit, pattern}).then(r1 => {\n          const total = r1.total;\n          const packages = r1.packages;\n\n          if (typeof(offset) === 'undefined')\n            offset = 0;\n\n          if (typeof(limit) === 'undefined' || limit === 0 || limit > total)\n            limit = total;\n\n          if (packages.length < limit) {\n            const batch = [];\n\n            for (let i = offset + packages.length; i < limit; i += 100)\n              batch.push(['oui.opkg', cmd, {\n                offset: i,\n                limit: (Math.min(i + 100, limit) % 100) || 100,\n                pattern\n              }]);\n\n            this.$ubus.callBatch(batch).then(r2 => {\n              if (!Array.isArray(r2))\n                r2 = [r2];\n\n              r2.forEach(item => {\n                r1.packages.push(...item.packages);\n              });\n\n              resolve(r1);\n            }).catch(() => {\n              reject();\n            });\n          } else {\n            resolve(r1);\n          }\n        }).catch(() => {\n          reject();\n        });\n      });\n    },\n    fetchPackageList(offset) {\n      let cmd = 'list';\n      let pattern = '';\n\n      if (this.filter.length > 0)\n        pattern = `*${this.filter}*`;\n\n      if (this.displayInstalled)\n        cmd = 'list_installed'\n\n      this.loading = true;\n      this.packages = [];\n\n      this.doFetchPackageList(cmd, offset, this.limit, pattern).then(r => {\n        this.total = r.total;\n        this.packages = r.packages.map(pkg => {\n          return {\n            ...pkg,\n            installed: this.installedList[pkg.name],\n            new_version: this.installedList[pkg.name] ? this.installedList[pkg.name].new_version : undefined\n          }\n        });\n        this.loading = false;\n      });\n    },\n    doInstallRemovePackage(name, cmd) {\n      return this.$ubus.call('oui.opkg', cmd, {package: name});\n    },\n    showStatus(res, title) {\n      let msg = '';\n\n      if (res.stdout)\n        msg += `<pre style=\"background-color: #f5f5f5; color: #333;\">${res.stdout}</pre>`;\n\n      if (res.stderr)\n        msg += `<pre style=\"background-color: #f5f5f5; color: #F56C6C\">${res.stderr}</pre>`;\n\n      if (res.code)\n        msg += this.$t('Package manager failed with status', {code: res.code});\n      else\n        msg += this.$t('Package manager finished successfully.');\n\n      this.$confirm(msg, title, {\n        dangerouslyUseHTMLString: true,\n        showCancelButton: false,\n        confirmButtonText: this.$t('Close')\n      }).then(() => {\n        if (!res.code) {\n          this.loading = true;\n          this.updateInstalledList().then(() => {\n            this.fetchPackageList((this.currentPage - 1) * this.limit);\n          });\n        }\n      });\n    },\n    installRemovePackage(name, installed, new_version) {\n      if (name === '')\n        return;\n\n      let title = installed ? 'Removing package' : 'Installing package';\n      let msg = installed ? 'Really remove package' : 'Really install package';\n      let cmd = installed ? 'remove' : 'install';\n\n      if (new_version) {\n        title = 'Upgrading package';\n        msg = 'Really upgrade package';\n        cmd = 'upgrade';\n        msg = this.$t(msg, {name: name, ver: new_version})\n      } else {\n        msg = this.$t(msg, {name: name})\n      }\n\n      title = this.$t(title, {name: name})\n\n      this.$confirm(msg, title, {\n        type: 'info'\n      }).then(() => {\n        const loading = this.$getLoading(this.$t('Waiting for package manager...'));\n        this.doInstallRemovePackage(name, cmd).then(r => {\n          loading.close();\n          this.showStatus(r, title);\n        });\n      });\n    },\n    doUpdatePackage() {\n      return this.$ubus.call('oui.opkg', 'update');\n    },\n    updatePackage() {\n      const loading = this.$getLoading(this.$t('Waiting for package manager...'));\n      this.doUpdatePackage().then(r => {\n        loading.close();\n        this.showStatus(r, 'Updating package lists');\n      });\n    },\n    updateInstalledList() {\n      return new Promise(resolve => {\n        this.doFetchPackageList('list_installed').then(r => {\n          this.installedList = {};\n          r.packages.forEach(pkg => {\n            this.installedList[pkg.name] = {};\n          });\n\n          this.doFetchPackageList('list_upgradable').then(r => {\n            r.packages.forEach(pkg => {\n              this.installedList[pkg.name].new_version = pkg.new_version;\n            });\n            resolve();\n          }).catch(() => {\n            resolve();\n          });\n        });\n      });\n    }\n  },\n  watch: {\n    displayInstalled() {\n      this.fetchPackageList(0);\n    },\n    currentPage() {\n      this.fetchPackageList((this.currentPage - 1) * this.limit);\n    }\n  },\n  created() {\n    this.$system.getDiskInfo().then(info => {\n      this.diskInfo.used = info.root.used;\n      this.diskInfo.total = info.root.total;\n    });\n\n    this.updateInstalledList().then(() => {\n      this.fetchPackageList(0);\n    });\n  }\n}\n",{"version":3,"sources":["software.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"software.vue","sourceRoot":"src/views/system","sourcesContent":["<template>\n  <div>\n    <el-card style=\" margin-bottom: 10px\">\n      <el-form label-width=\"200px\" style=\"max-width: 600px\">\n        <el-form-item :label=\"$t('Used space')\">\n          <el-progress :text-inside=\"true\" :stroke-width=\"20\" :percentage=\"diskUsedPercentage\"></el-progress>\n          <span>{{ diskUsedDetailed }}</span>\n        </el-form-item>\n        <el-form-item :label=\"$t('Update package lists')\">\n          <el-button type=\"primary\" size=\"small\" @click=\"updatePackage\">{{ $t('Start update...') }}</el-button>\n        </el-form-item>\n        <el-form-item :label=\"$t('Install package directly')\">\n          <el-row>\n            <el-col :span=\"20\"><el-input v-model=\"packageName\" :placeholder=\"$t('Enter URL or name...')\"></el-input></el-col>\n            <el-col :span=\"4\"><el-button type=\"primary\" @click=\"installRemovePackage(packageName, false)\">>></el-button></el-col>\n          </el-row>\n        </el-form-item>\n        <el-form-item :label=\"$t('Filter packages')\">\n          <el-input v-model=\"filter\" :placeholder=\"$t('Filter packages...')\" @keyup.enter.native=\"fetchPackageList(0)\"></el-input>\n          <el-checkbox v-model=\"displayInstalled\">{{ $t('Display only installed packages') }}</el-checkbox>\n        </el-form-item>\n      </el-form>\n    </el-card>\n    <el-card>\n      <div slot=\"header\">\n        <el-pagination background layout=\"prev, pager, next\" :page-size=\"limit\" :total=\"total\" :current-page.sync=\"currentPage\"></el-pagination>\n      </div>\n      <el-table :data=\"packages\" v-loading=\"loading\" :element-loading-text=\"$t('Loading...')\"  element-loading-spinner=\"el-icon-loading\" element-loading-background=\"rgba(0, 0, 0, 0.8)\">\n        <el-table-column prop=\"name\" :label=\"$t('Software-Package')\" width=\"200\"></el-table-column>\n        <el-table-column prop=\"version\" :label=\"$t('Version')\" width=\"200\" show-overflow-tooltip></el-table-column>\n        <el-table-column prop=\"size\" :label=\"$t('Size') + '(KB)'\" width=\"100\"></el-table-column>\n        <el-table-column prop=\"description\" :label=\"$t('Description')\" show-overflow-tooltip>\n        </el-table-column>\n        <el-table-column label=\"#\" width=\"200\">\n          <template v-slot=\"{ row }\">\n            <div style=\"display: flex;\">\n              <el-button :type=\"row.installed ? 'success' : 'danger'\" size=\"mini\" @click=\"installRemovePackage(row.name, row.installed)\">{{ row.installed ? $t('Installed') : $t('Not installed') }}</el-button>\n              <el-tooltip v-if=\"row.new_version\" placement=\"top\" :content=\"$t('Can be upgrade to', {ver: row.new_version})\">\n                <el-button type=\"primary\" size=\"mini\" @click=\"installRemovePackage(row.name, row.installed, row.new_version)\">{{ $t('Upgradable') }}</el-button>\n              </el-tooltip>\n            </div>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      diskInfo: {\n        used: 0,\n        total: 0\n      },\n      diskSpace: 0,\n      packageName: '',\n      filter: '',\n      packages: [],\n      total: 0,\n      limit: 50,\n      currentPage: 1,\n      displayInstalled: false,\n      installedList: {},\n      loading: true\n    }\n  },\n  computed: {\n    diskUsedPercentage() {\n      if (this.diskInfo.used === 0)\n        return 0;\n      return parseInt(this.diskInfo.used / this.diskInfo.total * 100);\n    },\n    diskUsedDetailed() {\n      const used = parseInt(this.diskInfo.used / 1024) + ' KB';\n      const total = parseInt(this.diskInfo.total / 1024) + ' KB';\n      return `${used} / ${total} ` + this.$t('used');\n    }\n  },\n  methods: {\n    doFetchPackageList(cmd, offset, limit, pattern) {\n      return new Promise((resolve, reject) => {\n        this.$ubus.call('oui.opkg', cmd, {offset, limit, pattern}).then(r1 => {\n          const total = r1.total;\n          const packages = r1.packages;\n\n          if (typeof(offset) === 'undefined')\n            offset = 0;\n\n          if (typeof(limit) === 'undefined' || limit === 0 || limit > total)\n            limit = total;\n\n          if (packages.length < limit) {\n            const batch = [];\n\n            for (let i = offset + packages.length; i < limit; i += 100)\n              batch.push(['oui.opkg', cmd, {\n                offset: i,\n                limit: (Math.min(i + 100, limit) % 100) || 100,\n                pattern\n              }]);\n\n            this.$ubus.callBatch(batch).then(r2 => {\n              if (!Array.isArray(r2))\n                r2 = [r2];\n\n              r2.forEach(item => {\n                r1.packages.push(...item.packages);\n              });\n\n              resolve(r1);\n            }).catch(() => {\n              reject();\n            });\n          } else {\n            resolve(r1);\n          }\n        }).catch(() => {\n          reject();\n        });\n      });\n    },\n    fetchPackageList(offset) {\n      let cmd = 'list';\n      let pattern = '';\n\n      if (this.filter.length > 0)\n        pattern = `*${this.filter}*`;\n\n      if (this.displayInstalled)\n        cmd = 'list_installed'\n\n      this.loading = true;\n      this.packages = [];\n\n      this.doFetchPackageList(cmd, offset, this.limit, pattern).then(r => {\n        this.total = r.total;\n        this.packages = r.packages.map(pkg => {\n          return {\n            ...pkg,\n            installed: this.installedList[pkg.name],\n            new_version: this.installedList[pkg.name] ? this.installedList[pkg.name].new_version : undefined\n          }\n        });\n        this.loading = false;\n      });\n    },\n    doInstallRemovePackage(name, cmd) {\n      return this.$ubus.call('oui.opkg', cmd, {package: name});\n    },\n    showStatus(res, title) {\n      let msg = '';\n\n      if (res.stdout)\n        msg += `<pre style=\"background-color: #f5f5f5; color: #333;\">${res.stdout}</pre>`;\n\n      if (res.stderr)\n        msg += `<pre style=\"background-color: #f5f5f5; color: #F56C6C\">${res.stderr}</pre>`;\n\n      if (res.code)\n        msg += this.$t('Package manager failed with status', {code: res.code});\n      else\n        msg += this.$t('Package manager finished successfully.');\n\n      this.$confirm(msg, title, {\n        dangerouslyUseHTMLString: true,\n        showCancelButton: false,\n        confirmButtonText: this.$t('Close')\n      }).then(() => {\n        if (!res.code) {\n          this.loading = true;\n          this.updateInstalledList().then(() => {\n            this.fetchPackageList((this.currentPage - 1) * this.limit);\n          });\n        }\n      });\n    },\n    installRemovePackage(name, installed, new_version) {\n      if (name === '')\n        return;\n\n      let title = installed ? 'Removing package' : 'Installing package';\n      let msg = installed ? 'Really remove package' : 'Really install package';\n      let cmd = installed ? 'remove' : 'install';\n\n      if (new_version) {\n        title = 'Upgrading package';\n        msg = 'Really upgrade package';\n        cmd = 'upgrade';\n        msg = this.$t(msg, {name: name, ver: new_version})\n      } else {\n        msg = this.$t(msg, {name: name})\n      }\n\n      title = this.$t(title, {name: name})\n\n      this.$confirm(msg, title, {\n        type: 'info'\n      }).then(() => {\n        const loading = this.$getLoading(this.$t('Waiting for package manager...'));\n        this.doInstallRemovePackage(name, cmd).then(r => {\n          loading.close();\n          this.showStatus(r, title);\n        });\n      });\n    },\n    doUpdatePackage() {\n      return this.$ubus.call('oui.opkg', 'update');\n    },\n    updatePackage() {\n      const loading = this.$getLoading(this.$t('Waiting for package manager...'));\n      this.doUpdatePackage().then(r => {\n        loading.close();\n        this.showStatus(r, 'Updating package lists');\n      });\n    },\n    updateInstalledList() {\n      return new Promise(resolve => {\n        this.doFetchPackageList('list_installed').then(r => {\n          this.installedList = {};\n          r.packages.forEach(pkg => {\n            this.installedList[pkg.name] = {};\n          });\n\n          this.doFetchPackageList('list_upgradable').then(r => {\n            r.packages.forEach(pkg => {\n              this.installedList[pkg.name].new_version = pkg.new_version;\n            });\n            resolve();\n          }).catch(() => {\n            resolve();\n          });\n        });\n      });\n    }\n  },\n  watch: {\n    displayInstalled() {\n      this.fetchPackageList(0);\n    },\n    currentPage() {\n      this.fetchPackageList((this.currentPage - 1) * this.limit);\n    }\n  },\n  created() {\n    this.$system.getDiskInfo().then(info => {\n      this.diskInfo.used = info.root.used;\n      this.diskInfo.total = info.root.total;\n    });\n\n    this.updateInstalledList().then(() => {\n      this.fetchPackageList(0);\n    });\n  }\n}\n</script>\n"]}]}