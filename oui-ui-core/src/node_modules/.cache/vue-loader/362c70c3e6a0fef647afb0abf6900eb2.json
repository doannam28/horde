{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\switch.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\network\\switch.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data() {\n    return {\n      switchs: [],\n      switchPortState: [\n        ['n', this.$t('Switch port state - off')],\n        ['u', this.$t('Switch port state - untagged')],\n        ['t', this.$t('Switch port state - tagged')]\n      ]\n    }\n  },\n  methods: {\n    switchTitle(info) {\n      return this.$t('Switch') + `\"${info.name}\"(${info.model})`;\n    },\n    vlanTitle(info) {\n      return this.$t('VLANs on-', {name: `\"${info.name}\"(${info.model})`});\n    },\n    portLabel(n, info) {\n      let label = `<span>Port ${n}</span><br/>`;\n\n      if (info.link) {\n        label += '<img src=\"/icons/port_up.png\"/><br/>'\n        label += '<span>' + info.speed + 'baseT ';\n        if (info.full_duplex)\n          label += this.$t('Full-duplex');\n        else\n          label += this.$t('Half-duplex');\n      } else {\n        label += '<img src=\"/icons/port_down.png\"/><br/>'\n        label += '<span>' + this.$t('No link');\n      }\n      label += '</span>'\n      return label;\n    },\n    filterVlanSection(s, self) {\n      return self.options.swname === s.device;\n    },\n    addVlanSection(self) {\n      const usedVID = {};\n\n      self.uciSections.forEach(s => {\n        if (s.vlan)\n          usedVID[s.vlan] = true;\n      });\n\n      for (let i = 1; i < self.options.num_vlans; i++) {\n        if (usedVID[i.toString()])\n          continue;\n        const sid = this.$uci.add('network', 'switch_vlan');\n        this.$uci.set('network', sid, 'device', self.options.swname);\n        this.$uci.set('network', sid, 'vlan', i.toString());\n        return sid;\n      }\n    },\n    vidValidator(val, self) {\n      const sections = self.uciSection.uciSections;\n      const usedVID = {};\n\n      if (!val)\n        return;\n\n      for (let i = 0; i < sections.length; i++) {\n        const sid = sections[i]['.name'];\n        const v = self.formValue(sid);\n        if (!v)\n          continue;\n        if (usedVID[v])\n          return this.$t('VLAN ID must be unique');\n        usedVID[v] = true;\n      }\n\n      const max = self.uciSection.options.max_vid;\n      if (!val.match(/[^0-9]/)) {\n        val = parseInt(val);\n        if (val >= 1 && val <= max)\n          return;\n      }\n\n      return this.$t('VID-ERR-MSG', {max: max});\n    },\n    loadPort(sid, self) {\n      let ports = this.$uci.get('network', sid, 'ports') || '';\n      ports = ports.split(' ');\n      const id = self.name.substr(4);\n      let v = 'n';\n\n      if (ports.indexOf(id + 't') > -1)\n        v = 't';\n\n      if (ports.indexOf(id) > -1)\n        v = 'u';\n\n      return v;\n    },\n    savePort(sid, val, self) {\n      const ports = this.$uci.get('network', sid, 'ports').split(' ');\n      const id = self.name.substr(4);\n\n      let i = ports.indexOf(id);\n      if (i === -1)\n        i = ports.indexOf(id + 't');\n\n      if (i !== -1)\n        ports.splice(i, 1);\n\n      if (val === 'u')\n        ports.push(id);\n      else if (val === 't')\n        ports.push(id + 't');\n\n      this.$uci.set('network', sid, 'ports', ports.join(' '));\n    }\n  },\n  created() {\n    this.$uci.load('network').then(() => {\n      const sections = this.$uci.sections('network', 'switch');\n      sections.forEach(s => {\n        let batch = [];\n        batch.push(['oui.network', 'switch_info', {switch: s.name}]);\n        batch.push(['oui.network', 'switch_status', {switch: s.name}]);\n\n        this.$ubus.callBatch(batch).then(rs => {\n          const info = rs[0].info;\n          const ports = rs[1].ports;\n          const attrs = {};\n\n          info.switch.forEach(attr => {\n            attrs[attr.name] = true;\n          });\n\n          let max_vid = info.num_vlans - 1;\n          const vlanAttrs = info.vlan.map(v => v.name);\n          if (vlanAttrs.indexOf('tag') > -1 || vlanAttrs.indexOf('vid') > -1 || vlanAttrs.indexOf('pvid') > -1)\n            max_vid = 4094;\n\n          this.switchs.push(Object.assign({\n            name: s.name,\n            sid: s['.name'],\n            max_vid: max_vid,\n            attrs: attrs,\n            ports: ports\n          }, info));\n        });\n      });\n    });\n  }\n}\n",{"version":3,"sources":["switch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"switch.vue","sourceRoot":"src/views/network","sourcesContent":["<template>\n  <el-tabs v-if=\"switchs.length > 0\" :value=\"switchs[0].name\">\n    <el-tab-pane v-for=\"s in switchs\" :key=\"s.name\" :name=\"s.name\" :label=\"switchTitle(s)\">\n      <uci-form config=\"network\" :apply-timeout=\"15\">\n        <uci-section :name=\"s.sid\">\n          <uci-option-switch v-if=\"s.attrs['enable_vlan']\" :label=\"$t('Enable VLAN functionality')\" name=\"enable_vlan\"></uci-option-switch>\n          <uci-option-switch v-if=\"s.attrs['enable_learning']\" :label=\"$t('Enable learning and aging')\" name=\"enable_learning\"></uci-option-switch>\n        </uci-section>\n        <uci-section title=\"VLAN\" type=\"switch_vlan\" :filter=\"filterVlanSection\" table addable :add=\"addVlanSection\" :options=\"{swname: s.name, num_vlans: s.num_vlans, max_vid: s.max_vid}\">\n          <uci-option-input label=\"VLAN ID\" name=\"vlan\" :rules=\"vidValidator\" required></uci-option-input>\n          <uci-option-list v-for=\"(port, i) in s.ports\" :key=\"i\" :header=\"portLabel(i, port)\" :name=\"'port' + i\" :options=\"switchPortState\" initial=\"n\" required :load=\"loadPort\" :save=\"savePort\"></uci-option-list>\n        </uci-section>\n      </uci-form>\n    </el-tab-pane>\n  </el-tabs>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      switchs: [],\n      switchPortState: [\n        ['n', this.$t('Switch port state - off')],\n        ['u', this.$t('Switch port state - untagged')],\n        ['t', this.$t('Switch port state - tagged')]\n      ]\n    }\n  },\n  methods: {\n    switchTitle(info) {\n      return this.$t('Switch') + `\"${info.name}\"(${info.model})`;\n    },\n    vlanTitle(info) {\n      return this.$t('VLANs on-', {name: `\"${info.name}\"(${info.model})`});\n    },\n    portLabel(n, info) {\n      let label = `<span>Port ${n}</span><br/>`;\n\n      if (info.link) {\n        label += '<img src=\"/icons/port_up.png\"/><br/>'\n        label += '<span>' + info.speed + 'baseT ';\n        if (info.full_duplex)\n          label += this.$t('Full-duplex');\n        else\n          label += this.$t('Half-duplex');\n      } else {\n        label += '<img src=\"/icons/port_down.png\"/><br/>'\n        label += '<span>' + this.$t('No link');\n      }\n      label += '</span>'\n      return label;\n    },\n    filterVlanSection(s, self) {\n      return self.options.swname === s.device;\n    },\n    addVlanSection(self) {\n      const usedVID = {};\n\n      self.uciSections.forEach(s => {\n        if (s.vlan)\n          usedVID[s.vlan] = true;\n      });\n\n      for (let i = 1; i < self.options.num_vlans; i++) {\n        if (usedVID[i.toString()])\n          continue;\n        const sid = this.$uci.add('network', 'switch_vlan');\n        this.$uci.set('network', sid, 'device', self.options.swname);\n        this.$uci.set('network', sid, 'vlan', i.toString());\n        return sid;\n      }\n    },\n    vidValidator(val, self) {\n      const sections = self.uciSection.uciSections;\n      const usedVID = {};\n\n      if (!val)\n        return;\n\n      for (let i = 0; i < sections.length; i++) {\n        const sid = sections[i]['.name'];\n        const v = self.formValue(sid);\n        if (!v)\n          continue;\n        if (usedVID[v])\n          return this.$t('VLAN ID must be unique');\n        usedVID[v] = true;\n      }\n\n      const max = self.uciSection.options.max_vid;\n      if (!val.match(/[^0-9]/)) {\n        val = parseInt(val);\n        if (val >= 1 && val <= max)\n          return;\n      }\n\n      return this.$t('VID-ERR-MSG', {max: max});\n    },\n    loadPort(sid, self) {\n      let ports = this.$uci.get('network', sid, 'ports') || '';\n      ports = ports.split(' ');\n      const id = self.name.substr(4);\n      let v = 'n';\n\n      if (ports.indexOf(id + 't') > -1)\n        v = 't';\n\n      if (ports.indexOf(id) > -1)\n        v = 'u';\n\n      return v;\n    },\n    savePort(sid, val, self) {\n      const ports = this.$uci.get('network', sid, 'ports').split(' ');\n      const id = self.name.substr(4);\n\n      let i = ports.indexOf(id);\n      if (i === -1)\n        i = ports.indexOf(id + 't');\n\n      if (i !== -1)\n        ports.splice(i, 1);\n\n      if (val === 'u')\n        ports.push(id);\n      else if (val === 't')\n        ports.push(id + 't');\n\n      this.$uci.set('network', sid, 'ports', ports.join(' '));\n    }\n  },\n  created() {\n    this.$uci.load('network').then(() => {\n      const sections = this.$uci.sections('network', 'switch');\n      sections.forEach(s => {\n        let batch = [];\n        batch.push(['oui.network', 'switch_info', {switch: s.name}]);\n        batch.push(['oui.network', 'switch_status', {switch: s.name}]);\n\n        this.$ubus.callBatch(batch).then(rs => {\n          const info = rs[0].info;\n          const ports = rs[1].ports;\n          const attrs = {};\n\n          info.switch.forEach(attr => {\n            attrs[attr.name] = true;\n          });\n\n          let max_vid = info.num_vlans - 1;\n          const vlanAttrs = info.vlan.map(v => v.name);\n          if (vlanAttrs.indexOf('tag') > -1 || vlanAttrs.indexOf('vid') > -1 || vlanAttrs.indexOf('pvid') > -1)\n            max_vid = 4094;\n\n          this.switchs.push(Object.assign({\n            name: s.name,\n            sid: s['.name'],\n            max_vid: max_vid,\n            attrs: attrs,\n            ports: ports\n          }, info));\n        });\n      });\n    });\n  }\n}\n</script>\n"]}]}