{"remainingRequest":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\interfaces\\proto\\static.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\network\\interfaces\\proto\\static.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport mixin from './proto'\nimport OverrideMac from './override-mac'\nimport OverrideMtu from './override-mtu'\n\nexport default {\n  mixins: [mixin],\n  inject: ['uciSection'],\n  data() {\n    return {\n      virtual: false,\n      floating: false,\n      ipaddr: '',\n      netmask: '',\n      netmasks: ['255.255.255.0', '255.255.0.0', '255.0.0.0'],\n      broadcast: '',\n      macaddr: ''\n    }\n  },\n  components: {\n    OverrideMac,\n    OverrideMtu\n  },\n  methods: {\n    calculateBroadcast() {\n      const i = this.ipaddr.split('.');\n      const m = this.netmask.split('.');\n\n      let I = 0;\n      let M = 0;\n\n      for (let n = 0; n < 4; n++) {\n        i[n] = parseInt(i[n]);\n        m[n] = parseInt(m[n]);\n\n        if (isNaN(i[n]) || i[n] < 0 || i[n] > 255 ||\n          isNaN(m[n]) || m[n] < 0 || m[n] > 255)\n          return;\n\n        I |= (i[n] << ((3 - n) * 8));\n        M |= (m[n] << ((3 - n) * 8));\n      }\n\n      const B = I | ~M;\n\n      this.broadcast = '%d.%d.%d.%d'.format((B >> 24) & 0xFF, (B >> 16) & 0xFF, (B >> 8) & 0xFF, (B >> 0) & 0xFF);\n    },\n    ipChange(v) {\n      this.ipaddr = v;\n      this.calculateBroadcast();\n    },\n    maskChange(v) {\n      this.netmask = v;\n      this.calculateBroadcast();\n    }\n  },\n  created() {\n    const iface = this.$network.getInterface(this.uciSection.name);\n    const dev = iface.getDevice();\n    if (dev)\n      this.macaddr = dev.macaddr;\n  }\n}\n",{"version":3,"sources":["static.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"static.vue","sourceRoot":"src/views/network/interfaces/proto","sourcesContent":["<template>\n  <div>\n    <uci-option-input tab=\"general\" :label=\"$t('IPv4 address')\" name=\"ipaddr\" required rules=\"ip4addr\" @change=\"ipChange\"></uci-option-input>\n    <uci-option-list tab=\"general\" :label=\"$t('IPv4 netmask')\" name=\"netmask\" allow-create :options=\"netmasks\" required rules=\"netmask4\" @change=\"maskChange\"></uci-option-list>\n    <uci-option-input tab=\"general\" :label=\"$t('IPv4 broadcast')\" name=\"broadcast\" :placeholder=\"broadcast\" rules=\"ip4addr\"></uci-option-input>\n    <uci-option-input tab=\"general\" :label=\"$t('IPv4 gateway')\" name=\"gateway\" rules=\"ip4addr\"></uci-option-input>\n    <uci-option-dlist tab=\"general\" :label=\"$t('DNS servers')\" name=\"dns\" rules=\"ipaddr\"></uci-option-dlist>\n    <override-mac></override-mac>\n    <override-mtu></override-mtu>\n    <uci-option-input tab=\"advanced\" :label=\"$t('Override MTU')\" name=\"mtu\" placeholder=\"1500\" :rules=\"{type: 'uinteger', max: 9200}\"></uci-option-input>\n  </div>\n</template>\n\n<script>\nimport mixin from './proto'\nimport OverrideMac from './override-mac'\nimport OverrideMtu from './override-mtu'\n\nexport default {\n  mixins: [mixin],\n  inject: ['uciSection'],\n  data() {\n    return {\n      virtual: false,\n      floating: false,\n      ipaddr: '',\n      netmask: '',\n      netmasks: ['255.255.255.0', '255.255.0.0', '255.0.0.0'],\n      broadcast: '',\n      macaddr: ''\n    }\n  },\n  components: {\n    OverrideMac,\n    OverrideMtu\n  },\n  methods: {\n    calculateBroadcast() {\n      const i = this.ipaddr.split('.');\n      const m = this.netmask.split('.');\n\n      let I = 0;\n      let M = 0;\n\n      for (let n = 0; n < 4; n++) {\n        i[n] = parseInt(i[n]);\n        m[n] = parseInt(m[n]);\n\n        if (isNaN(i[n]) || i[n] < 0 || i[n] > 255 ||\n          isNaN(m[n]) || m[n] < 0 || m[n] > 255)\n          return;\n\n        I |= (i[n] << ((3 - n) * 8));\n        M |= (m[n] << ((3 - n) * 8));\n      }\n\n      const B = I | ~M;\n\n      this.broadcast = '%d.%d.%d.%d'.format((B >> 24) & 0xFF, (B >> 16) & 0xFF, (B >> 8) & 0xFF, (B >> 0) & 0xFF);\n    },\n    ipChange(v) {\n      this.ipaddr = v;\n      this.calculateBroadcast();\n    },\n    maskChange(v) {\n      this.netmask = v;\n      this.calculateBroadcast();\n    }\n  },\n  created() {\n    const iface = this.$network.getInterface(this.uciSection.name);\n    const dev = iface.getDevice();\n    if (dev)\n      this.macaddr = dev.macaddr;\n  }\n}\n</script>\n"]}]}