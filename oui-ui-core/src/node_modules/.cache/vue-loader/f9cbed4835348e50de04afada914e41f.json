{"remainingRequest":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\system\\admin.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\src\\views\\system\\admin.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\horde-oui\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n  data() {\n    const validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error(this.$t('Please enter your password')));\n      } else {\n        if (this.passwordForm.confirm !== '')\n          this.$refs['passwordForm'].validateField('confirm');\n        callback();\n      }\n    };\n\n    const validatorConfirm = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error(this.$t('Please enter your password again')));\n      } else if (value !== this.passwordForm.password) {\n        callback(new Error(this.$t('Inconsistent input password twice!')));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      passwordForm: {\n        password: '',\n        confirm: ''\n      },\n      passwordRules: {\n        password: [{validator: validatePass}],\n        confirm: [{validator: validatorConfirm}]\n      },\n      interfaces: [\n        ['', this.$t('unspecified')]\n      ],\n      hasDropbear: false\n    }\n  },\n  methods: {\n    setPassword() {\n      this.$session.get(r => {\n        this.$system.setPassword(r.username, this.passwordForm.password).then(() => {\n          this.$router.push('/login');\n        });\n      });\n    }\n  },\n  created() {\n    this.$network.load().then(() => {\n      const interfaces = this.$network.getInterfaces();\n      this.interfaces.push(...interfaces.map(item => item.name));\n    });\n\n    this.$uci.load('dropbear').then(() => {\n      this.hasDropbear = true;\n    }).catch(() => {\n      this.hasDropbear = false;\n    });\n  }\n}\n",{"version":3,"sources":["admin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"admin.vue","sourceRoot":"src/views/system","sourcesContent":["<template>\n  <el-tabs value=\"password\">\n    <el-tab-pane :label=\"$t('Router Password')\" name=\"password\">\n      <el-card :title=\"$t('Router Password')\" style=\"width: 500px\">\n        <el-form label-width=\"200px\" :model=\"passwordForm\" :rules=\"passwordRules\" ref=\"passwordForm\">\n          <el-form-item :label=\"$t('Password')\" prop=\"password\">\n            <el-input show-password v-model=\"passwordForm.password\"></el-input>\n          </el-form-item>\n          <el-form-item :label=\"$t('Confirmation')\" prop=\"confirm\">\n            <el-input show-password v-model=\"passwordForm.confirm\"></el-input>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" size=\"mini\"  @click=\"setPassword\" style=\"float: right;margin-right: 50px;\">{{ $t('Save') }}</el-button>\n          </el-form-item>\n        </el-form>\n      </el-card>\n    </el-tab-pane>\n    <el-tab-pane :label=\"$t('SSH Access')\" name=\"dropbear\" v-if=\"hasDropbear\">\n      <uci-form config=\"dropbear\">\n        <uci-section :title=\"$t('SSH Server')\" type=\"dropbear\" addable>\n          <uci-option-list :label=\"$t('Interface')\" name=\"Interface\" :options=\"interfaces\" :description=\"$t('Listen only on the given interface or, if unspecified, on all')\"></uci-option-list>\n          <uci-option-input :label=\"$t('Port')\" name=\"Port\" placeholder=\"22\" rules=\"port\" :description=\"$t('Specifies the listening port of this Dropbear instance')\"></uci-option-input>\n          <uci-option-switch :label=\"$t('Password authentication')\" name=\"PasswordAuth\" initial=\"on\" active-value=\"on\" inactive-value=\"off\" :description=\"$t('Allow SSH password authentication')\"></uci-option-switch>\n          <uci-option-switch :label=\"$t('Allow root logins with password')\" name=\"RootPasswordAuth\" initial=\"on\" active-value=\"on\" inactive-value=\"off\" :description=\"$t('Allow the root user to login with password')\"></uci-option-switch>\n          <uci-option-switch :label=\"$t('Gateway ports')\" name=\"GatewayPorts\" active-value=\"on\" inactive-value=\"off\" :description=\"$t('Allow remote hosts to connect to local SSH forwarded ports')\"></uci-option-switch>\n        </uci-section>\n      </uci-form>\n    </el-tab-pane>\n  </el-tabs>\n</template>\n\n<script>\n\nexport default {\n  data() {\n    const validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error(this.$t('Please enter your password')));\n      } else {\n        if (this.passwordForm.confirm !== '')\n          this.$refs['passwordForm'].validateField('confirm');\n        callback();\n      }\n    };\n\n    const validatorConfirm = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error(this.$t('Please enter your password again')));\n      } else if (value !== this.passwordForm.password) {\n        callback(new Error(this.$t('Inconsistent input password twice!')));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      passwordForm: {\n        password: '',\n        confirm: ''\n      },\n      passwordRules: {\n        password: [{validator: validatePass}],\n        confirm: [{validator: validatorConfirm}]\n      },\n      interfaces: [\n        ['', this.$t('unspecified')]\n      ],\n      hasDropbear: false\n    }\n  },\n  methods: {\n    setPassword() {\n      this.$session.get(r => {\n        this.$system.setPassword(r.username, this.passwordForm.password).then(() => {\n          this.$router.push('/login');\n        });\n      });\n    }\n  },\n  created() {\n    this.$network.load().then(() => {\n      const interfaces = this.$network.getInterfaces();\n      this.interfaces.push(...interfaces.map(item => item.name));\n    });\n\n    this.$uci.load('dropbear').then(() => {\n      this.hasDropbear = true;\n    }).catch(() => {\n      this.hasDropbear = false;\n    });\n  }\n}\n</script>\n"]}]}