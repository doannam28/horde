{"remainingRequest":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\system\\upgrade.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\src\\views\\system\\upgrade.vue","mtime":1591674512000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Project VMODEV\\Horde\\oui\\oui-master\\oui-ui-core\\src\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'upgrade',\n  data() {\n    return {\n      sid: '',\n      fileListArchive: [],\n      fileListFirmware: []\n    }\n  },\n  methods: {\n    restoreBackup() {\n      return this.$ubus.call('oui.system', 'backup_restore');\n    },\n    testUpgrade() {\n      return this.$ubus.call('rpc-sys', 'upgrade_test');\n    },\n    startUpgrade(keep) {\n      return this.$ubus.call('rpc-sys', 'upgrade_start', {keep});\n    },\n    cleanUpgrade() {\n      return this.$ubus.call('rpc-sys', 'upgrade_clean');\n    },\n    cleanBackup() {\n      return this.$ubus.call('oui.system', 'backup_clean');\n    },\n    generateArchive() {\n      this.$refs['backup'].submit();\n    },\n    performReset() {\n      this.$confirm(this.$t('This will reset the system to its initial configuration, all changes made since the initial flash will be lost!'), this.$t('Really reset all changes?')).then(() => {\n        this.$ubus.call('rpc-sys', 'factory').then(() => {\n          this.$reconnect(this.$t('Rebooting...'));\n        });\n      });\n    },\n    uploadFile(ref) {\n      this.$refs[ref].submit();\n    },\n    onUploadArchiveSuccess(res) {\n      let title = this.$t('Backup restore');\n      let content = '<p>' + this.$t('backup archive was uploaded completely', {btn: this.$t('OK')}) + '</p>';\n      content += '<ul>';\n      content += `<li><strong>${this.$t('Checksum')}: </strong>${res.checksum}</li>`;\n\n      const size = (res.size / 1024).toFixed(2);\n      content += `<li><strong>${this.$t('Size')}: </strong>${size} KB</li>`;\n      content += '</ul>';\n\n      this.$confirm(content, title, {\n        dangerouslyUseHTMLString: true\n      }).then(() => {\n        this.restoreBackup().then(r => {\n          if (r.code === 0) {\n            content = this.$t('The backup was successfully restored, it is advised to reboot the system now in order to apply all configuration changes.');\n            this.$confirm(content, title, {\n              confirmButtonText: this.$t('Reboot now')\n            }).then(() => {\n              this.$system.reboot().then(() => {\n                this.$reconnect(this.$t('Rebooting...'));\n              });\n            });\n          } else {\n            content = this.$t('Backup restoration failed, Make sure that you choose the file format for your platform.');\n            this.$confirm(content, title, {\n              showCancelButton: false,\n              confirmButtonText: this.$t('Close')\n            }).then(() => {\n              this.cleanBackup();\n            });\n          }\n        });\n      });\n    },\n    onUploadFirmwareSuccess(info) {\n      this.testUpgrade().then(res => {\n        if (res.code === 0) {\n          let title = this.$t('Verify firmware');\n          let content = '<p>' + this.$t('The firmware image was uploaded completely', {btn: this.$t('OK')}) + '</p>'\n          content += '<ul>';\n          content += `<li><strong>${this.$t('Checksum')}: </strong>${info.checksum}</li>`;\n\n          const size = (info.size / 1024 / 1024).toFixed(2);\n          content += `<li><strong>${this.$t('Size')}: </strong>${size} MB</li>`;\n          content += '</ul>';\n          content += `<input id=\"upgrade-firmware-keep\" type=\"checkbox\" checked> ${this.$t('Keep configuration when reflashing')}`;\n\n          this.$confirm(content, title, {\n            showClose: false,\n            closeOnClickModal: false,\n            dangerouslyUseHTMLString: true\n          }).then(() => {\n            const keep = document.getElementById('upgrade-firmware-keep').checked;\n            this.startUpgrade(keep).then(() => {\n              this.$reconnect(this.$t('Upgrading...'));\n            });\n          }).catch(() => {\n            this.cleanUpgrade();\n          });\n        } else {\n          const content = this.$t('The uploaded image file does not contain a supported format. Make sure that you choose the generic image format for your platform.');\n          this.$confirm(content, this.$t('Invalid image'), {\n            showCancelButton: false,\n            confirmButtonText: this.$t('Close')\n          }).then(() => {\n            this.cleanUpgrade();\n          });\n        }\n      });\n    }\n  },\n  created() {\n    this.sid = this.$session.sid();\n  }\n}\n",{"version":3,"sources":["upgrade.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"upgrade.vue","sourceRoot":"src/views/system","sourcesContent":["<template>\n  <div>\n    <el-card :header=\"$t('Backup / Restore')\" style=\"margin-bottom: 15px\">\n      <form ref=\"backup\" method=\"POST\" action=\"/cgi-bin/cgi-backup\">\n        <input v-show=\"false\" type=\"text\" :value=\"sid\" name=\"sessionid\" />\n      </form>\n      <p>{{ $t('Backup-Restore-desc') }}</p>\n      <el-button type=\"primary\" size=\"small\" @click=\"generateArchive\">{{ $t('Generate archive') }}</el-button>\n      <el-button type=\"danger\" size=\"small\" @click=\"performReset\">{{ $t('Perform reset') }}</el-button>\n      <p>{{ $t('To restore configuration files, you can upload a previously generated backup archive here.') }}</p>\n      <el-upload ref=\"archive\" action=\"/cgi-bin/cgi-upload\" :on-success=\"onUploadArchiveSuccess\" :file-list=\"fileListArchive\" :auto-upload=\"false\" :limit=\"1\" :data=\"{filename: '/tmp/backup.tar.gz', sessionid: sid}\" style=\"width: 600px\">\n        <el-button slot=\"trigger\" size=\"small\" type=\"primary\">{{ $t('Select File') }}</el-button>\n        <el-button style=\"margin-left: 10px;\" size=\"small\" type=\"success\" @click=\"uploadFile('archive')\">{{ $t('Upload archive...') }}</el-button>\n      </el-upload>\n    </el-card>\n    <el-card :header=\"$t('Flash new firmware image')\">\n      <p>{{ $t('Upgrade-Firmware-desc') }}</p>\n      <el-upload ref=\"firmware\" action=\"/cgi-bin/cgi-upload\" :on-success=\"onUploadFirmwareSuccess\" :file-list=\"fileListFirmware\" :auto-upload=\"false\" :limit=\"1\" :data=\"{filename: '/tmp/firmware.bin', sessionid: sid}\" style=\"width: 600px\">\n        <el-button slot=\"trigger\" size=\"small\" type=\"primary\">{{ $t('Select File') }}</el-button>\n        <el-button style=\"margin-left: 10px;\" size=\"small\" type=\"success\" @click=\"uploadFile('firmware')\">{{ $t('Upload Firmware...') }}</el-button>\n      </el-upload>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'upgrade',\n  data() {\n    return {\n      sid: '',\n      fileListArchive: [],\n      fileListFirmware: []\n    }\n  },\n  methods: {\n    restoreBackup() {\n      return this.$ubus.call('oui.system', 'backup_restore');\n    },\n    testUpgrade() {\n      return this.$ubus.call('rpc-sys', 'upgrade_test');\n    },\n    startUpgrade(keep) {\n      return this.$ubus.call('rpc-sys', 'upgrade_start', {keep});\n    },\n    cleanUpgrade() {\n      return this.$ubus.call('rpc-sys', 'upgrade_clean');\n    },\n    cleanBackup() {\n      return this.$ubus.call('oui.system', 'backup_clean');\n    },\n    generateArchive() {\n      this.$refs['backup'].submit();\n    },\n    performReset() {\n      this.$confirm(this.$t('This will reset the system to its initial configuration, all changes made since the initial flash will be lost!'), this.$t('Really reset all changes?')).then(() => {\n        this.$ubus.call('rpc-sys', 'factory').then(() => {\n          this.$reconnect(this.$t('Rebooting...'));\n        });\n      });\n    },\n    uploadFile(ref) {\n      this.$refs[ref].submit();\n    },\n    onUploadArchiveSuccess(res) {\n      let title = this.$t('Backup restore');\n      let content = '<p>' + this.$t('backup archive was uploaded completely', {btn: this.$t('OK')}) + '</p>';\n      content += '<ul>';\n      content += `<li><strong>${this.$t('Checksum')}: </strong>${res.checksum}</li>`;\n\n      const size = (res.size / 1024).toFixed(2);\n      content += `<li><strong>${this.$t('Size')}: </strong>${size} KB</li>`;\n      content += '</ul>';\n\n      this.$confirm(content, title, {\n        dangerouslyUseHTMLString: true\n      }).then(() => {\n        this.restoreBackup().then(r => {\n          if (r.code === 0) {\n            content = this.$t('The backup was successfully restored, it is advised to reboot the system now in order to apply all configuration changes.');\n            this.$confirm(content, title, {\n              confirmButtonText: this.$t('Reboot now')\n            }).then(() => {\n              this.$system.reboot().then(() => {\n                this.$reconnect(this.$t('Rebooting...'));\n              });\n            });\n          } else {\n            content = this.$t('Backup restoration failed, Make sure that you choose the file format for your platform.');\n            this.$confirm(content, title, {\n              showCancelButton: false,\n              confirmButtonText: this.$t('Close')\n            }).then(() => {\n              this.cleanBackup();\n            });\n          }\n        });\n      });\n    },\n    onUploadFirmwareSuccess(info) {\n      this.testUpgrade().then(res => {\n        if (res.code === 0) {\n          let title = this.$t('Verify firmware');\n          let content = '<p>' + this.$t('The firmware image was uploaded completely', {btn: this.$t('OK')}) + '</p>'\n          content += '<ul>';\n          content += `<li><strong>${this.$t('Checksum')}: </strong>${info.checksum}</li>`;\n\n          const size = (info.size / 1024 / 1024).toFixed(2);\n          content += `<li><strong>${this.$t('Size')}: </strong>${size} MB</li>`;\n          content += '</ul>';\n          content += `<input id=\"upgrade-firmware-keep\" type=\"checkbox\" checked> ${this.$t('Keep configuration when reflashing')}`;\n\n          this.$confirm(content, title, {\n            showClose: false,\n            closeOnClickModal: false,\n            dangerouslyUseHTMLString: true\n          }).then(() => {\n            const keep = document.getElementById('upgrade-firmware-keep').checked;\n            this.startUpgrade(keep).then(() => {\n              this.$reconnect(this.$t('Upgrading...'));\n            });\n          }).catch(() => {\n            this.cleanUpgrade();\n          });\n        } else {\n          const content = this.$t('The uploaded image file does not contain a supported format. Make sure that you choose the generic image format for your platform.');\n          this.$confirm(content, this.$t('Invalid image'), {\n            showCancelButton: false,\n            confirmButtonText: this.$t('Close')\n          }).then(() => {\n            this.cleanUpgrade();\n          });\n        }\n      });\n    }\n  },\n  created() {\n    this.sid = this.$session.sid();\n  }\n}\n</script>\n"]}]}